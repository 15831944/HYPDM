<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EAS.MicroKernel</name>
    </assembly>
    <members>
        <member name="T:EAS.Sockets.SocketUtils">
            <summary>
            Socket通信辅助类，统计信息辅助类。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.Singleton">
            <summary>
            单例。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.StartTime">
            <summary>
            开始时间。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.PacketSize">
            <summary>
            报文长度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SendPackets">
            <summary>
            发送的消息报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.ReceivePackets">
            <summary>
            接收的消息报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.DiscardPackets">
            <summary>
            丢弃的报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.EffectiveRatio">
            <summary>
            有效报文比例。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SendMessages">
            <summary>
            发送的消息汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.ReceiveMessages">
            <summary>
            接收的消息汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SendBytes">
            <summary>
            发送的消息IO汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.ReceiveBytes">
            <summary>
            接收的消息IO汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.DiscardBytes">
            <summary>
            丢弃的消息IO汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SendDataBytes">
            <summary>
            发送的数据字节数（除去包头之后的高层消息字节数）。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.ReceiveDataBytes">
            <summary>
            接收的数据字节数（除去包头之后的高层消息字节数）。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.TimeOutms">
            <summary>
            启动累计时间/秒。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.SendSpeed">
            <summary>
            消息发送速度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.ReceiveSpeed">
            <summary>
            消息接收速度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.EffectiveSendSpeed">
            <summary>
            有效消息发送速度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketUtils.EffectiveReceiveSpeed">
            <summary>
            有效消息接收速度。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceMethodAttribute">
            <summary>
            服务方法属性。
            </summary>
            <remarks>
            标记在服务(组件/接口)的公开方法之上，用于标记本方法为一个服务方法，目前主要用于控制细化的权限。
            </remarks>
        </member>
        <member name="M:EAS.Services.ServiceMethodAttribute.#ctor">
            <summary>
            初始化ServiceMethodAttribute对象。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceMethodAttribute.#ctor(System.String)">
            <summary>
            初始化ServiceMethodAttribute对象。
            </summary>
            <param name="name">名称。</param>
        </member>
        <member name="M:EAS.Services.ServiceMethodAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化ServiceMethodAttribute对象。
            </summary>
            <param name="guid">Guid。</param>
            <param name="name">名称。</param>
        </member>
        <member name="M:EAS.Services.ServiceMethodAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化ServiceMethodAttribute对象。
            </summary>
            <param name="guid">Guid。</param>
            <param name="name">名称。</param>
            <param name="description">说明。</param>
        </member>
        <member name="P:EAS.Services.ServiceMethodAttribute.Guid">
            <summary>
            Guid。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceMethodAttribute.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceMethodAttribute.Description">
            <summary>
            说明。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceBridgerContext">
            <summary>
            对象上下文。
            </summary>
        </member>
        <member name="T:EAS.Services.LocalServiceBridger">
            <summary>
            直连服务桥。
            </summary>
        </member>
        <member name="T:EAS.Services.DirectServiceBridger">
            <summary>
            直连服务桥。
            </summary>
        </member>
        <member name="T:EAS.Services.IServiceBridger">
            <summary>
            服务桥接接口。
            </summary>
            <remarks>
            本接口用于充当代理与服务组件之间的桥接，本接口不同的实现以实现服务代理与服务组件之间不同的跨越。
            </remarks>
        </member>
        <member name="M:EAS.Services.IServiceBridger.InvokeMethod(System.Reflection.MethodBase,System.Object[])">
            <summary>
            调用对象方法。
            </summary>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="M:EAS.Services.IServiceBridger.InvokeMethod(System.Type,System.Reflection.MethodBase,System.Object[])">
            <summary>
            调用对象方法。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="P:EAS.Services.IServiceBridger.SessionID">
            <summary>
            获取当前会话ID。
            </summary>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.InvokeMethod(System.Type,System.Object@,System.Reflection.MethodBase,System.Object[])">
            <summary>
            X.调用对象方法。
            </summary>
            <param name="serviceType">执行一切方法。</param>
            <param name="target">调用的目标。</param>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.InvokeMethod(System.Reflection.MethodBase,System.Object[])">
            <summary>
            调用对象方法。
            </summary>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.InvokeMethod(System.Type,System.Reflection.MethodBase,System.Object[])">
            <summary>
            调用对象方法。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="method">方法信息。</param>
            <param name="args">参数。</param>
            <returns>调用结果。</returns>
        </member>
        <member name="M:EAS.Services.DirectServiceBridger.UpdateSession(System.Object)">
            <summary>
            向会话/服务端注入会话信息。
            </summary>
            <param name="dataTag">会话信息。</param>
        </member>
        <member name="P:EAS.Services.DirectServiceBridger.SessionID">
            <summary>
            获取当前会话Guid。
            </summary>
        </member>
        <member name="P:EAS.Services.DirectServiceBridger.DataTag">
            <summary>
            当前会话的数据标记。
            </summary>
            <remarks>
            可以通过本属性来完成向当前会话注入相关信息，比如当前账号信息等。
            </remarks>
        </member>
        <member name="T:EAS.Objects.Lifecycle.PoolableLifestyleManager">
            <summary>
            组件生存管理周期之Pooled，组件池，初始时分配一定数量的组件，客户请求时，分配一个空闲组件，用户使用完后交由池中。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.AbstractLifestyleManager">
            <summary>
            抽象的生存周期管理类，定义不同组件生存机制的抽象机别。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.ILifecycleManager">
            <summary>
            接口 ILifecycleManager ，组件生命周期管理。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifecycleManager.Init(EAS.Objects.IComponentAdapter,EAS.Objects.IContainer)">
            <summary>
            组件生命周期管理，初始化组件。
            </summary>
            <param name="componentAdapter">组件激励器对象。</param>
            <param name="Container">组件容器对象。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifecycleManager.Resolve">
            <summary>
            组件生命周期管理，返回一个组件实例。
            </summary>
            <returns>按照规定的组件生命周期分配的一个组件实例</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifecycleManager.Release(System.Object)">
            <summary>
            组件生命周期管理，释放组件实例。
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:EAS.Objects.Lifecycle.ILifecycleManager.Container">
            <summary>
            获取组件生成周期对象所在的组件容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.Lifecycle.ILifecycleManager.ComponentAdapter">
            <summary>
            获取组件生成周期对象所在的组件适配器。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.AbstractLifestyleManager.Init(EAS.Objects.IComponentAdapter,EAS.Objects.IContainer)">
            <summary>
            组件生命周期管理，初始化组件。
            </summary>
            <param name="componentAdapter">组件激励器对象。</param>
            <param name="container">组件容器对象。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.AbstractLifestyleManager.Resolve">
            <summary>
            组件生命周期管理，返回一个组件实例。
            </summary>
            <returns>按照规定的组件生命周期分配的一个组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.AbstractLifestyleManager.Release(System.Object)">
            <summary>
            组件生命周期管理，释放组件实例。
            </summary>
            <param name="instance">需要释放的组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.AbstractLifestyleManager.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="P:EAS.Objects.Lifecycle.AbstractLifestyleManager.Container">
            <summary>
            获取在组件生存周期中的组件容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.Lifecycle.AbstractLifestyleManager.ComponentAdapter">
            <summary>
            获取在组件生存周期中的组件适配器。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.#ctor">
            <summary>
            初始化 PoolableLifestyleManager 对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.#ctor(System.Int32,System.Int32)">
            <summary>
            使用组件池初始容量及最大容量初始化 PoolableLifestyleManager 对象实例。 
            </summary>
            <param name="initialSize">组件池初始容量。</param>
            <param name="maxSize">组件池最大容量。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.#ctor(System.Int32,System.Int32,EAS.Objects.Lifecycle.Pool.PoolMode)">
            <summary>
            使用组件池初始容量及最大容量初始化 PoolableLifestyleManager 对象实例。 
            </summary>
            <param name="initialSize">组件池初始容量。</param>
            <param name="maxSize">组件池最大容量。</param>
            <param name="mode">对象池管理模式。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.Init(EAS.Objects.IComponentAdapter,EAS.Objects.IContainer)">
            <summary>
            组件生命周期管理，初始化组件。
            </summary>
            <param name="componentAdapter">组件激励器对象。</param>
            <param name="container">组件容器对象。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.Resolve">
            <summary>
            组件生命周期管理，返回一个组件实例。
            </summary>
            <returns>按照规定的组件生命周期分配的一个组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.Release(System.Object)">
            <summary>
            组件生命周期管理，释放组件实例。
            </summary>
            <param name="instance">需要释放的组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PoolableLifestyleManager.InitPool(System.Int32,System.Int32)">
            <summary>
            初始化组件池，生成一个组件池（IPool）接口实例。
            </summary>
            <param name="initialSize">组件池初始容量。</param>
            <param name="maxSize">组件池最在容量。</param>
            <returns>组件池对象。</returns>
        </member>
        <member name="T:EAS.Objects.Lifecycle.ILifestyleManagerFactory">
            <summary>
            ILifestyleManager接口工厂。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifestyleManagerFactory.Create(EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="lifestyleType">组件的生命周期方式枚举。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifestyleManagerFactory.Create(EAS.Objects.ComponentInfo)">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="componentInfo">组件相关属性描述。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.ILifestyleManagerFactory.Create(EAS.Objects.Lifecycle.LifestyleType,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="lifestyleType">组件的生命周期方式枚举。</param>
            <param name="parameters" >组件生存周期相关参数。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="T:EAS.Sockets.Messages.AbstractMessageHandler`1">
            <summary>
            抽象的基础消息处理器。
            </summary>
            <typeparam name="T">消息类型。</typeparam>
        </member>
        <member name="T:EAS.Sockets.Messages.IMessageHandler`1">
            <summary>
            网络消息处理程序。
            </summary>
            <typeparam name="T">消息类型。</typeparam>
            <remarks>
            消息处理程序与具体的消息协议相关联，用于处理特定消息协议业务流程，主要用于客户程序的特定处理，服务请求回应等。 
            </remarks>
        </member>
        <member name="T:EAS.Sockets.Messages.IMessageHandler">
            <summary>
            网络消息处理程序。
            </summary>
            <remarks>
            消息处理程序与具体的消息协议相关联，用于处理特定消息协议业务流程，主要用于客户程序的特定处理，服务请求回应等。 
            </remarks>
        </member>
        <member name="M:EAS.Sockets.Messages.IMessageHandler.Process(EAS.Sockets.NetSession,System.UInt32,EAS.Sockets.Messages.IMessage)">
            <summary>
            消息处理，对接收的消息进行处理。
            </summary>
            <param name="context">消息会话上下文。</param>
            <param name="instanceId">消息实例ID。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.IMessageHandler`1.Process(EAS.Sockets.NetSession,System.UInt32,`0)">
            <summary>
            消息处理，对接收的消息进行处理。
            </summary>
            <param name="context">消息会话上下文。</param>
            <param name="instanceId">消息实例ID。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.AbstractMessageHandler`1.Process(EAS.Sockets.NetSession,System.UInt32,EAS.Sockets.Messages.IMessage)">
            <summary>
            消息处理，对接收的消息进行处理。
            </summary>
            <param name="context">消息会话上下文。</param>
            <param name="instanceId">消息实例ID。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.AbstractMessageHandler`1.Process(EAS.Sockets.NetSession,System.UInt32,`0)">
            <summary>
            消息处理，对接收的消息进行处理。
            </summary>
            <param name="context">消息会话上下文。</param>
            <param name="instanceId">消息实例ID。</param>
            <param name="message">消息。</param>
        </member>
        <member name="T:EAS.Sockets.PacketHandler">
            <summary>
            报文传输委托。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">消息传输参数。</param>
        </member>
        <member name="T:EAS.Sockets.PacketEventArgs">
            <summary>
            报文传输参数。
            </summary>
        </member>
        <member name="M:EAS.Sockets.PacketEventArgs.#ctor">
            <summary>
            初始化PacketTransferEventArgs对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.PacketEventArgs.#ctor(System.Guid,EAS.Sockets.Messages.NetPacket)">
            <summary>
            初始化PacketTransferEventArgs对象实例。
            </summary>
            <param name="client">消息链。</param>
            <param name="packet">消息报文。</param>
        </member>
        <member name="P:EAS.Sockets.PacketEventArgs.Client">
            <summary>
            客户Guid。
            </summary>
        </member>
        <member name="P:EAS.Sockets.PacketEventArgs.Packet">
            <summary>
            消息报文。
            </summary>
        </member>
        <member name="T:EAS.EventArgs`1">
            <summary>
            事件参数类。
            </summary>
            <typeparam name="T">事件参数类型。</typeparam>
        </member>
        <member name="M:EAS.EventArgs`1.#ctor(`0)">
            <summary>
            构造方法
            </summary>
            <param name="data">事件参数类型</param>
        </member>
        <member name="P:EAS.EventArgs`1.Data">
            <summary>
            获取参数数据。
            </summary>
        </member>
        <member name="T:EAS.Context.IContextFactory">
            <summary>
            上下文(IContext)生成工厂接口定义。
            </summary>
        </member>
        <member name="M:EAS.Context.IContextFactory.Create">
            <summary>
            生成一个上下文（IContext）接口对象实例。
            </summary>		
            <returns>上下文（IContext）接口实例。</returns>
        </member>
        <member name="T:EAS.AddInInfo">
            <summary>
            插件信息。
            </summary>
        </member>
        <member name="P:EAS.AddInInfo.Guid">
            <summary>
            全局唯一标识符 (GUID)。
            </summary>
        </member>
        <member name="P:EAS.AddInInfo.Name">
            <summary>
            插件名称。
            </summary>
        </member>
        <member name="P:EAS.AddInInfo.Type">
            <summary>
            插件类型信息。
            </summary>
        </member>
        <member name="P:EAS.AddInInfo.Description">
            <summary>
            插件说明。
            </summary>
        </member>
        <member name="P:EAS.AddInInfo.Version">
             <summary>
            插件版本。
             </summary>
        </member>
        <member name="P:EAS.AddInInfo.Developer">
            <summary>
            开发者信息。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.SocketServiceLocator">
            <summary>
            Socket服务定位器。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.AbstractServiceLocator">
            <summary>
            抽象类，服务定位器基础实现。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.IServiceLocator">
            <summary>
            服务定位器接口，运行时动态管理各种服务定位。
            </summary>
            <remarks>
            本接口采用接口驱动的思路帮助开发者开发信息系统，对系统提供的各种服务，需提供抽像接口，服务消费者直接使用接口进行服务调用，而具体的服务定义由服务定位器在运行时动态完成服务的定义。
            </remarks>
        </member>
        <member name="M:EAS.Services.Locators.IServiceLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.IServiceLocator.GetService``1(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <typeparam name="T">服务接口类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.IServiceLocator.Release``1(System.String,``0)">
            <summary>
            获取指定的服务实例。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <param name="service">服务实例。</param>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceLocator.GetService(System.String,System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <param name="interfaceType">服务接口。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceLocator.GetService(System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="interfaceType">服务接口类型。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceLocator.GetService``1(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <typeparam name="T">服务接口类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceLocator.Release``1(System.String,``0)">
            <summary>
            获取指定的服务实例。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <param name="service">服务实例。</param>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceLocator.GetService(System.String,System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <param name="interfaceType">服务接口。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceLocator.GetService``1(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <typeparam name="T">服务接口类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceLocator.Release``1(System.String,``0)">
            <summary>
            获取指定的服务实例。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <param name="service">服务实例。</param>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceLocator.CreateProxy``1(System.String)">
            <summary>
            构造socket代理。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Services.Locators.WcfServiceLocator">
            <summary>
            Wcf服务定位器。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceLocator.GetService(System.String,System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <param name="interfaceType">服务接口。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceLocator.GetService``1(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <typeparam name="T">服务接口类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceLocator.Release``1(System.String,``0)">
            <summary>
            获取指定的服务实例。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <param name="service">服务实例。</param>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceLocator.CreateProxy``1(System.String)">
            <summary>
            构造WCF代理。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Sockets.Messages.RequestMessageAttribute">
            <summary>
            请示消息属性。
            </summary>
            <remarks>
            为AgileEAS.NET SOA平台网络通信框架提供的请示响应消息标记。
            </remarks>
        </member>
        <member name="T:EAS.Sockets.SessionStartEventHandler">
            <summary>
            会话注册事件的委托。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SessionStartEventArgs">
            <summary>
            会话注册事件的参数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SessionStartEventArgs.Session">
            <summary>
            获取注册的会话对象。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.NetPacketStream">
            <summary>
            消息分包解析。
            </summary>
            <remarks>
            尽管socket环境如此恶劣，但是TCP的链接也至少保证了：
            •包发送顺序在传输过程中是不会改变的，例如发送方发送 H E L L，那么接收方一定也是顺序收到H E L L，
            这个是TCP协议承诺的，因此这点成为我们解决分包、黏包问题的关键。
            •如果发送方发送的是helloworld, 传输过程中分割成为hello+world，那么TCP保证了在hello与world之间没有其他的byte。
            但是不能保证helloworld和下一个命令之间没有其他的byte。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacketStream.ReadGuid">
            <summary>
            读GUID、即消息标志位。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacketStream.ReadUInt32">
            <summary>
            读UInt32，实例ID。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacketStream.ReadUInt16">
            <summary>
            读UInt16，报文索引\报文总数\报文长度。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacketStream.ReadBytes(System.Int32)">
            <summary>
            读字节数组，即报文内容。
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacketStream.Write(System.Byte[],System.Int32)">
            <summary>
            写入接收的数据到NetPacketStream。
            </summary>
            <param name="buffer">接收数据。</param>
            <param name="count">接收总数。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacketStream.Read(EAS.Sockets.Messages.NetPacket@)">
            <summary>
            读接收的报文。
            </summary>
            <param name="packet">报文实例。</param>
            <returns></returns>
            <remarks>
            最关键的处理即是寻找报文头，128位/16字节的数据头标志。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacketStream.EnsureCapacity(System.Int32)">
            <summary>
            缓存区扩容。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacketStream.Remove">
            <summary>
            剔除已读取的报文。
            </summary>
            <remarks>
            1.删除m_Position之前的记录，2.把m_Position之后的数据搬到m_buffer开始位置。
            </remarks>
        </member>
        <member name="T:EAS.Collections.DictionaryEx`2">
            <summary>
            支持XML序列化的泛型Dictionary类。
            </summary>
        </member>
        <member name="M:EAS.Collections.DictionaryEx`2.#ctor">
            <summary>
            初始化DictionaryEx对象实例。
            </summary>
        </member>
        <member name="M:EAS.Collections.DictionaryEx`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            初始化DictionaryEx对象实例。
            </summary>
            <param name="dictionary">IDictionary实例。</param>
        </member>
        <!-- 对于成员“M:EAS.Collections.DictionaryEx`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})”忽略有格式错误的 XML 注释 -->
        <member name="M:EAS.Collections.DictionaryEx`2.#ctor(System.Int32)">
            <summary>
            初始化DictionaryEx对象实例。
            </summary>
            <param name="capacity">初始容量。</param>
        </member>
        <!-- 对于成员“M:EAS.Collections.DictionaryEx`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:EAS.Collections.DictionaryEx`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)”忽略有格式错误的 XML 注释 -->
        <member name="M:EAS.Collections.DictionaryEx`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            从对象的XML表示形式生成该对象。
            </summary>
            <param name="reader">对象从中进行反序列化的 System.Xml.XmlReader 流。</param>
        </member>
        <member name="M:EAS.Collections.DictionaryEx`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            将对象转换为其XML表示形式
            </summary>
            <param name="writer">对象要序列化为的 System.Xml.XmlWriter 流。</param>
        </member>
        <member name="T:EAS.Aspect.AspectConfig">
            <summary>
            系统配置读取类。
            </summary>
        </member>
        <member name="F:EAS.Aspect.AspectConfig.instance">
            <summary>
            单实例。
            </summary>
        </member>
        <member name="F:EAS.Aspect.AspectConfig._lock">
            <summary>
            对象锁。
            </summary>
        </member>
        <member name="M:EAS.Aspect.AspectConfig.#ctor">
            <summary>
            初始化 AspectConfig 类实例。
            </summary>
        </member>
        <member name="M:EAS.Aspect.AspectConfig.InternalInitialize(System.Xml.XmlNode)">
            <summary>
            根据系统配置根节点初始系统配置。
            </summary>
            <param name="rootNode">根节点。</param>
        </member>
        <member name="P:EAS.Aspect.AspectConfig.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="T:EAS.Services.InvokeResultMessage">
            <summary>
            方法调用结果消息。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.IMessage">
            <summary>
            消息接口定义。
            </summary>
            <remarks>
            这里所说的消息是指业务处理的最小单元，而不是传输于网络之间的网络消息。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.Messages.IMessage.Load(EAS.Sockets.Messages.MessageReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.IMessage.WriteTo(EAS.Sockets.Messages.MessageWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="M:EAS.Services.InvokeResultMessage.#ctor">
            <summary>
            初始化InvokeResultMessage对象实例。
            </summary>
        </member>
        <member name="M:EAS.Services.InvokeResultMessage.#ctor(System.String)">
            <summary>
            初始化InvokeResultMessage对象实例。
            </summary>
            <param name="setupPath">初始路径。</param>
        </member>
        <member name="M:EAS.Services.InvokeResultMessage.Load(EAS.Sockets.Messages.MessageReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Services.InvokeResultMessage.WriteTo(EAS.Sockets.Messages.MessageWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="M:EAS.Services.InvokeResultMessage.BindToType(System.String,System.String)">
            <summary>
            控制将序列化对象绑定到类型的过程。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="typeName">类型名称。</param>
            <returns>序列化对象类型。</returns>
        </member>
        <member name="P:EAS.Services.InvokeResultMessage.Error">
            <summary>
            错误消息。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeResultMessage.Target">
            <summary>
            对象实例。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeResultMessage.Value">
            <summary>
            结果。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeResultMessage.Args">
            <summary>
            返回参数。
            </summary>
        </member>
        <member name="T:EAS.Services.InvokeMessage">
            <summary>
            方法调用消息，用于分布式通信使用，支持 socket、wcf、web service、remoting
            </summary>
        </member>
        <member name="M:EAS.Services.InvokeMessage.Load(EAS.Sockets.Messages.MessageReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Services.InvokeMessage.WriteTo(EAS.Sockets.Messages.MessageWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="M:EAS.Services.InvokeMessage.BindToType(System.String,System.String)">
            <summary>
            控制将序列化对象绑定到类型的过程。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="typeName">类型名称。</param>
            <returns>序列化对象类型。</returns>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Assembly">
            <summary>
            程序集。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Type">
            <summary>
            类型。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.ByRef">
            <summary>
            是否引用实例。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Target">
            <summary>
            调用目标。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Method">
            <summary>
            调用方法。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.MethodName">
            <summary>
            方法名称。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Args">
            <summary>
            调用参数。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Mac">
            <summary>
            MAC地址。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.HostName">
            <summary>
            主机名称。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.IPAddress">
            <summary>
            IP地址。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.SessionID">
            <summary>
            会话ID。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.DataSet">
            <summary>
            帐套。
            </summary>
        </member>
        <member name="P:EAS.Services.InvokeMessage.Organization">
            <summary>
            组织机构。
            </summary>
        </member>
        <member name="T:EAS.Security.PermissionException">
            <summary>
            权限异常。
            </summary>
        </member>
        <member name="M:EAS.Security.PermissionException.#ctor">
            <summary>
            初始化 PermissionException 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Security.PermissionException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 PermissionException 类的新实例。
            </summary>
            <param name="message">异常信息。</param>
        </member>
        <member name="M:EAS.Security.PermissionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 PermissionException 类的新实例。
            </summary>
            <param name="info">它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">它包含有关源或目标的上下文信息。</param>
        </member>
        <member name="M:EAS.Security.PermissionException.#ctor(EAS.Services.ServiceMethodAttribute)">
            <summary>
            初始化 PermissionException 类的新实例。
            </summary>
            <param name="servieMethod">服务方法定义。</param>
        </member>
        <member name="T:EAS.Security.Cryptography.Password">
            <summary>
            非对称加密密码算法。
            </summary>
            <remarks>
            为提供非对称密码算法，提供密码生成、密码验证等功能。字符串密码加密后得到的密钥长度为64个字节，相同的字符串密码在不同位置、不同的事件加密将产生不同的密钥。
            </remarks>	
        </member>
        <member name="M:EAS.Security.Cryptography.Password.#ctor">
            <summary>
            初始化Password 类的实例。
            </summary>
        </member>
        <member name="M:EAS.Security.Cryptography.Password.Encrypt(System.String)">
            <summary>
            加密指定的密码。
            </summary>
            <param name="password">要加密的密码。该值不能为空引用。</param>
            <returns>返回加密后的密钥。该密钥的长度为64个字节。后32个字节为一个随机salt值。</returns>
            <exception cref="T:System.ArgumentNullException">password 为空引用。</exception>
            <remarks>
            加密过程如下：
            （1）、将密码（口令）转换为字节数组；
            （2）、散列该字节数组；
            （3）、为口令添加随机salt值，并再次散列该值；
            （4）、将随机的salt值添加到散列数据之后，返回。
            </remarks>
        </member>
        <member name="M:EAS.Security.Cryptography.Password.Verify(System.String,System.Byte[])">
            <summary>
            验证给定的密码是否和指定的密钥匹配。
            </summary>
            <param name="password">要验证的密码。</param>
            <param name="key">要验证的密钥。密钥的长度为64个字节。</param>
            <returns>如果可以通过指定的密钥生成和key相匹配的密钥，则返回true；否则返回false。</returns>
            <exception cref="T:System.ArgumentNullException">password 或者 key 为空引用。</exception>
            <exception cref="T:System.ArgumentException">key 的长度不等于 64。</exception>
        </member>
        <member name="P:EAS.Security.Cryptography.Password.EmptyPassword">
            <summary>
            代表一个空密码（String.Empty 对应的密码）。每次使用该值都会返回一个不同的结果。
            </summary>
            <remarks>每次使用该值都会返回一个不同的结果。</remarks>
        </member>
        <member name="T:EAS.Security.Cryptography.MD5">
            <summary>
            MD5加密算法。
            </summary>
            <remarks>
            为AgileEAS.NET提供密码生成、密码验证等功能。
            </remarks>	
        </member>
        <member name="T:EAS.Objects.Injection.InjectionType">
            <summary>
            枚举InjectorType，对象的注入类型。
            </summary>
        </member>
        <member name="F:EAS.Objects.Injection.InjectionType.PropertyInject">
            <summary>
            PropertyInject，属性注入；Type2 构造子注入 。
            </summary>
        </member>
        <member name="F:EAS.Objects.Injection.InjectionType.ConstructorInject">
            <summary>
            ConstructorInject，构造器注入；即Objects Type3 设值注入 。
            </summary>
        </member>
        <member name="T:EAS.Objects.InjectionInfo">
            <summary>
            Objects容器中用于描述一个对象值入器的相关的属性。
            </summary>
        </member>
        <member name="M:EAS.Objects.InjectionInfo.#ctor">
            <summary>
            初始化 ObjectInfo 实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.InjectionInfo.Name">
            <summary>
            获取或设置一个值，批示对象名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.InjectionInfo.Assembly">
            <summary>
            获取或设置一个值，批示对象所在的程序集名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.InjectionInfo.Type">
            <summary>
            获取或设置一个值，批示对象的类型。
            </summary>
        </member>
        <member name="T:EAS.IPlatform">
            <summary>
             AgileEAS.NET中间件/平台中的插件平台定义。
            </summary>
            <remarks>
            IPlatform接口定义了平台与插件结构之中的平台，平台为插件提供当前上下文环境、会话信息以及管理插件的运行。
            </remarks>
        </member>
        <member name="M:EAS.IPlatform.GetLoadedAddIns">
            <summary>
            获取已加载的所有插件。
            </summary>
            <returns>已加载的插件清单。</returns>
        </member>
        <member name="M:EAS.IPlatform.StartModule(System.Object)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.IPlatform.StartModule(System.Type)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块类型。</param>
        </member>
        <member name="M:EAS.IPlatform.StartModule(System.Guid)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块Guid。</param>
        </member>
        <member name="M:EAS.IPlatform.Demand(System.Guid)">
            <summary>
            验证权限，验证当前系统登录人员是否具有某个构件的访问权限。
            </summary>
            <param name="component">构件Guid。</param>
            <returns>验证通过返回True，否则返回False。</returns>
        </member>
        <member name="M:EAS.IPlatform.Demand(System.Guid,EAS.Security.Privileges)">
            <summary>
            验证权限，验证当前系统登录人员是否具有某个构件的访问权限。
            </summary>
            <param name="component">构件Guid。</param>
            <param name="privileges">权限值。</param>
            <returns>验证通过返回True，否则返回False。</returns>
        </member>
        <member name="M:EAS.IPlatform.OpenModule(System.Object)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.IPlatform.OpenModule(System.Type)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块类型。</param>
        </member>
        <member name="M:EAS.IPlatform.OpenModule(System.Guid)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块Guid。</param>
        </member>
        <member name="M:EAS.IPlatform.CloseModule(System.Object)">
            <summary>
            关闭模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.IPlatform.CloseModule">
            <summary>
            关闭当前模块。
            </summary>
        </member>
        <member name="M:EAS.IPlatform.CallScript(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行脚本。
            </summary>
            <param name="script">脚本代码。</param>
            <param name="args">调用参数。</param>
            <remarks>
            动态向用户提供平台的调用。
            </remarks>
        </member>
        <member name="P:EAS.IPlatform.Name">
            <summary>
            获取应用程序名称。
            </summary>
        </member>
        <member name="P:EAS.IPlatform.Context">
            <summary>
            获取对象上下文环境。
            </summary>
        </member>
        <member name="P:EAS.IPlatform.Container">
            <summary>
            获取组件容器。
            </summary>
        </member>
        <member name="P:EAS.IPlatform.Session">
            <summary>
            获取容器的当前会话。
            </summary>
        </member>
        <member name="P:EAS.IPlatform.Time">
            <summary>
            当前系统时间/服务器时间。
            </summary>
        </member>
        <member name="P:EAS.IPlatform.WorkflowRuntime">
            <summary>
            获取工作流运行时环境。
            </summary>
        </member>
        <member name="E:EAS.IPlatform.Started">
            <summary>
            当平台启动完成后发生。
            </summary>
        </member>
        <member name="E:EAS.IPlatform.Notify">
            <summary>
            当平台发出通知时发生。
            </summary>
        </member>
        <member name="E:EAS.IPlatform.AddLoad">
            <summary>
            平台成功加载模块之后触发。
            </summary>
        </member>
        <member name="E:EAS.IPlatform.AddInClosing">
            <summary>
            平台关闭模块时触发。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.NetMessage">
            <summary>
            网络消息，通过Socket进行收发的通信对象。
            </summary>
            <remarks>
            所有高层消息/协议都会被转换为NetMessage之后能过Socket进行收发，消息编码格式为4字节(长度消息标志组合体)+16字节消息类型ID+4字节消息实例ID+4字节消息回复ID，共28字节。
            </remarks>
        </member>
        <member name="F:EAS.Sockets.Messages.NetMessage.MessageMaxSize">
            <summary>
            最大消息大小1M。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.NetMessage.#ctor(System.Byte[])">
            <summary>
            使用字节流初始化NetMessage。
            </summary>
            <param name="buffer">字节流对象。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.NetMessage.#ctor(System.Collections.Generic.IList{EAS.Sockets.Messages.NetPacket})">
            <summary>
            使用报文分组初始化NetMessage。
            </summary>
            <param name="packets">分组报文。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.NetMessage.#ctor(EAS.Sockets.Messages.IMessage)">
            <summary>
            使用IMessage实例初始化NetMessage。
            </summary>
            <param name="message">高层消息实例。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.NetMessage.#ctor(EAS.Sockets.Messages.IMessage,System.UInt32)">
            <summary>
            使用IMessage实例初始化NetMessage。
            </summary>
            <param name="message">高层消息实例。</param>
            <param name="replyTo">回复消息ID。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.NetMessage.CreateNetMessage(System.Byte[])">
            <summary>
            创建消息。
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:EAS.Sockets.Messages.NetMessage.ToBytes">
            <summary>
            转换消息为字节流。
            </summary>
            <returns>消息对应的字节流。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.NetMessage.ToPacketList">
            <summary>
            转换网络消息为报文分组。
            </summary>
            <returns>报文列表。</returns>
        </member>
        <member name="P:EAS.Sockets.Messages.NetMessage.Guid">
            <summary>
            消息Guid。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.NetMessage.InstanceId">
            <summary>
            消息实例ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.NetMessage.ReplyTo">
            <summary>
            回复消息ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.NetMessage.Body">
            <summary>
            消息体。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.NetMessage.Length">
            <summary>
            消息长度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.NetMessage.Request">
            <summary>
            请示消息？。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.NetMessage.Message">
            <summary>
            消息源。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.NetMessage.MessageSignal.GetMessageInstanceId">
            <summary>
            求最大消息实例ID。
            </summary>
            <returns>消息实例ID。</returns>
        </member>
        <member name="P:EAS.Sockets.Messages.NetMessage.MessageSignal.Singleton">
            <summary>
            单例。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ErrorSource">
            <summary>
            服务器发生的错误的类型。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.ServerStarting">
            <summary>
            服务器启动时发生错误。此时将停止服务的启动过程，并关闭建立的侦听器（如果已经建立了的话）。服务器的状态维持在 Unstarted 。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.ServerStartedEvent">
            <summary>
            服务器启动事件发生错误。如果指定了 StopServer，则停止已经启动的服务器。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.ServerStoppingEvent">
            <summary>
            服务器即将停止的事件发生错误。此时如果指定 StopServer 为 false，将取消停止过程，维持在 Running 状态。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.ServerStoppedEvent">
            <summary>
            服务器已经停止的事件发生错误。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.ServerStopping">
            <summary>
            服务器停止过程中发生错误，此阶段用于停止所有的会话，并关闭侦听连接。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.ServiceAccepting">
            <summary>
            服务器接收连接请求时发生错误。如果指定 StopServer 为 true，则停止服务器。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.SessionAbandoningEvent">
            <summary>
            会话终止事件发生错误。如果指定 AbandonSession 为 false，则取消注销过程。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.SessionAbandonedEvent">
            <summary>
            会话终止后的事件发生错误。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.SessionAbandoning">
            <summary>
            会话中过程中发生错误。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.ClientConnecting">
            <summary>
            客户端建立连接过程之中发生错误。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.ClientCloseing">
            <summary>
            客户端关闭连接过程中发生错误。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.MessageReceiving">
            <summary>
            服务器在接收消息的过程中发生错误。如果指定 StopServer 为 true，则停止服务器。如果指定 AbandonSession 为 true，则注销会话。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.MessageReceivedEvent">
            <summary>
            服务器在处理消息的过程中发生错误。如果指定 StopServer 为 true，则停止服务器。如果指定 AbandonSession 为 true，则注销会话。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ErrorSource.MessageSend">
            <summary>
            发送数据过程之中发生错误。
            </summary>
        </member>
        <member name="M:EAS.Objects.AssemblyCacheProvider.#ctor">
            <summary>
            初始化 AssemblyCacheProvider 对象实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.AssemblyCacheProvider.Instance">
            <summary>
            对象的唯一实例。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.DatumResponseMessage">
            <summary>
            基准响应消息，主要用于性能测试。。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.DatumResponseMessage.#ctor">
            <summary>
            初始化DatumRequestMessage消息实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.DatumResponseMessage.#ctor(System.String)">
            <summary>
            使用字符串初始化DatumRequestMessage对象。
            </summary>
            <param name="chatText"></param>
        </member>
        <member name="M:EAS.Sockets.Messages.DatumResponseMessage.Load(EAS.Sockets.Messages.MessageReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.DatumResponseMessage.WriteTo(EAS.Sockets.Messages.MessageWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Messages.DatumResponseMessage.Content">
            <summary>
            聊天内容。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.SocketPool.instance">
            <summary>
            单实例。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.SocketPool._lock">
            <summary>
            对象锁。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.SocketPool.Pop(System.String,System.Int32)">
            <summary>
            获取一个SocketClient对象。
            </summary>
            <param name="host">主机。</param>
            <param name="port">端口。</param>
            <returns>SocketClient对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.SocketPool.Push(EAS.Sockets.SocketClient)">
            <summary>
            压入堆栈。
            </summary>
            <param name="item">SocketClient对象。</param>
        </member>
        <member name="P:EAS.Services.Locators.SocketPool.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="T:EAS.Aspect.IAspectContext">
            <summary>
            定义Aspect的上下文接口。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.Target">
            <summary>
            目标对象。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.Method">
            <summary>
            调用方法。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.Arguments">
            <summary>
            方法参数。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.ReturnValue">
            <summary>
            返回值。
            </summary>
        </member>
        <member name="P:EAS.Aspect.IAspectContext.Exception">
            <summary>
            异常信息。
            </summary>
        </member>
        <member name="T:EAS.Aspect.PointcutType">
            <summary>
            横切点类型枚举。
            </summary>
        </member>
        <member name="F:EAS.Aspect.PointcutType.Method">
            <summary>
            方法执行时切入。
            </summary>
        </member>
        <member name="F:EAS.Aspect.PointcutType.Construction">
            <summary>
            对象构造时切入。
            </summary>
        </member>
        <member name="T:EAS.Aspect.CrosscutInfo">
            <summary>
            横切对象配置信息。
            </summary>
        </member>
        <member name="P:EAS.Aspect.CrosscutInfo.ClassList">
            <summary>
            类匹配。
            </summary>
        </member>
        <member name="P:EAS.Aspect.CrosscutInfo.PointcutList">
            <summary>
            切点定义。
            </summary>
        </member>
        <member name="T:EAS.Aspect.AspectInfo">
            <summary>
            方面的配置定义。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.Assembly">
            <summary>
            Aspect程序集。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.Type">
            <summary>
            Aspect类型。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.PointcutValue">
            <summary>
            切点位置值。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.AllowConstruction">
            <summary>
            允许构造器切入。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.AllowMethod">
            <summary>
            允许方法切入。
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectInfo.CrosscutList">
            <summary>
            类匹配。
            </summary>
        </member>
        <member name="T:EAS.Workflow.WorkflowResult">
            <summary>
            工作流处理结果。
            </summary>
        </member>
        <member name="M:EAS.Workflow.WorkflowResult.#ctor">
            <summary>
            初始化WorkflowResult对象实例。
            </summary>
        </member>
        <member name="M:EAS.Workflow.WorkflowResult.#ctor(System.Guid)">
            <summary>
            初始化WorkflowResult对象实例。
            </summary>
            <param name="instanceId">实例ID。</param>
        </member>
        <member name="M:EAS.Workflow.WorkflowResult.#ctor(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            初始化WorkflowResult对象实例。
            </summary>
            <param name="instanceId">实例ID。</param>
            <param name="submit">充许提交。</param>
            <param name="approval">充许审批。</param>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.FlowID">
            <summary>
            流程ID。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.InstanceId">
            <summary>
            实例ID。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Submit">
            <summary>
            是否充许提交。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Approval">
            <summary>
            是否充许审批。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.DataEntity">
            <summary>
            数据实体。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.TDataEntity">
            <summary>
            实体数据类型。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.DataXML">
            <summary>
            实体数据XML。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.IsComplete">
            <summary>
            是否已经完成。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Cancel">
            <summary>
            是否取消操作。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Error">
            <summary>
            异常信息。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Message">
            <summary>
            异常信息/文本。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.Source">
            <summary>
            异常信息/来源。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.TargetSite">
            <summary>
            异常信息/来源。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowResult.StackTrace">
            <summary>
            异常信息/堆栈。
            </summary>
        </member>
        <member name="E:EAS.Workflow.WorkflowResult.Completed">
            <summary>
            完成事件。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceContainer">
            <summary>
            服务组件容器。
            </summary>
            <remarks>
            用于取得服务组件实例或者服务组件的代理，根据系统当前不同的ServiceBridger桥接完成服务代理组件与服务组件的通信。
            </remarks>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService``1">
            <summary>
            从容器中取得一个服务/代理组件。
            </summary>
            <typeparam name="T">服务/接口类型。</typeparam>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService``1(System.String)">
            <summary>
            从容器中取得一个服务/代理组件。
            </summary>
            <typeparam name="T">服务/接口类型。</typeparam>
            <param name="serviceBridger">服务桥(Ioc配置中的Key。)</param>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService``1(EAS.Services.IServiceBridger)">
            <summary>
            从容器中取得一个服务/代理组件。
            </summary>
            <typeparam name="T">服务/接口类型。</typeparam>
            <param name="serviceBridger">服务桥。</param>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService(System.Type)">
            <summary>
            根据服务/接口类型从容器中取得一个服务/代理组件。
            </summary>
            <param name="serviceType">服务/接口类型。</param>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService(System.Type,System.String)">
            <summary>
            根据服务/接口类型从容器中取得一个服务/代理组件。
            </summary>
            <param name="serviceType">服务/接口类型。</param>
            <param name="serviceBridger">服务桥。</param>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="M:EAS.Services.ServiceContainer.GetService(System.Type,EAS.Services.IServiceBridger)">
            <summary>
            根据服务/接口类型从容器中取得一个服务/代理组件。
            </summary>
            <param name="serviceType">服务/接口类型。</param>
            <param name="serviceBridger">服务桥。</param>
            <returns>服务/代理组件。</returns>
        </member>
        <member name="T:EAS.Services.Locators.CodeGenerator2">
            <summary>
            内部类，用于运行时代码生成。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.CodeGenerator2.GenWebServiceAgentType(System.String,System.Type)">
            <summary>
            生成WebService代理类型。
            </summary>
            <param name="url">服务url。</param>
            <param name="interfaceType">接口类型。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.Locators.CodeGenerator2.GetAgentClassName(System.String)">
            <summary>
            取得Web service 代理类名称。
            </summary>
            <param name="url">Web service URL。</param>
            <returns>服务代理类名称。</returns>
        </member>
        <member name="T:EAS.Services.Locators.AbstractServiceInfo">
            <summary>
            抽像类，服务配置信息基类
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.IServiceInfo">
            <summary>
            服务配置文件。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.IServiceInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="P:EAS.Services.Locators.IServiceInfo.Name">
            <summary>
            服务名称。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.IServiceInfo.ServiceType">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.IServiceInfo.Singleton">
            <summary>
            单例模式？
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.AbstractServiceInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="P:EAS.Services.Locators.AbstractServiceInfo.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.AbstractServiceInfo.ServiceType">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.AbstractServiceInfo.Singleton">
            <summary>
            单例模式。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.WebServiceLocator">
            <summary>
            Web服务定位器。
            </summary>
            <remarks>
            用于动态管理web service代理。
            </remarks>
        </member>
        <member name="M:EAS.Services.Locators.WebServiceLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.WebServiceLocator.GetService(System.String,System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <param name="interfaceType">服务接口。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="T:EAS.Security.Base64">
            <summary>
            Base64编码类。
            </summary>
            <remarks>为提供Base64字符串处理支持，数据加密、CA认证的基础。</remarks>
        </member>
        <member name="M:EAS.Security.Base64.#ctor">
            <summary>
            初始化 Base64 类的实例。
            </summary>
        </member>
        <member name="M:EAS.Security.Base64.Decrypt(System.Byte[])">
            <summary>
            将指定的Base64字节数组转换为其原始字节数组。
            </summary>
            <param name="buffer">要转换的字节数组。</param>
            <returns>返回转换后的字节数组。</returns>
        </member>
        <member name="M:EAS.Security.Base64.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            将指定的Base64字节流转换为原始流，并保存在指定的输出流中。
            </summary>
            <param name="inStream">要转换的字节流。</param>
            <param name="outStream">接收输出的字节流。</param>
            <exception cref="T:System.ArgumentNullException">inStream 或者 outStream 为空引用。</exception>
        </member>
        <member name="M:EAS.Security.Base64.Decrypt(System.String)">
            <summary>
            将指定的 base64 字符串转换为其原始字符串。
            </summary>
            <param name="source">要解密的 base64 字符串。</param>
            <returns>返回解密后的字符串。</returns>
        </member>
        <member name="M:EAS.Security.Base64.Encrypt(System.Byte[])">
            <summary>
            将指定的字节数组转换为Base64编码。
            </summary>
            <param name="buffer">要转换的字节数组。</param>
            <returns>返回转换后的字节数组。</returns>
        </member>
        <member name="M:EAS.Security.Base64.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            将指定的字节流转换为Base64流，并保存在指定的输出流中。
            </summary>
            <param name="inStream">要转换的字节流。</param>
            <param name="outStream">接收输出的字节流。</param>
            <exception cref="T:System.ArgumentNullException">inStream 或者 outStream 为空引用。</exception>
        </member>
        <member name="M:EAS.Security.Base64.Encrypt(System.String)">
            <summary>
            将指定的字符串转换为相应的 Base64 字符串。
            </summary>
            <param name="source">要加密的字符串。</param>
            <returns>返回已经加密的 base64 字符串。</returns>
        </member>
        <member name="T:EAS.Objects.Lifecycle.PerThreadLifestyleManager">
            <summary>
            组件生存管理周期之Thread，每一个客户端线程拥有单独的一个实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PerThreadLifestyleManager.#ctor">
            <summary>
            初始化 PerThreadLifestyleManager 实例。 
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PerThreadLifestyleManager.Resolve">
            <summary>
            组件生命周期管理，返回一个组件实例。
            </summary>
            <returns>按照规定的组件生命周期分配的一个组件实例</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PerThreadLifestyleManager.Release(System.Object)">
            <summary>
            组件生命周期管理，释放组件实例。
            </summary>
            <param name="instance">需要释放的组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PerThreadLifestyleManager.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.PerThreadLifestyleManager.OnDeserialization(System.Object)">
            <summary>
            在整个对象图形已经反序列化时运行。
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:EAS.Services.ITimeService">
            <summary>
            时间同步服务接口。
            </summary>
        </member>
        <member name="M:EAS.Services.ITimeService.GetCurrentTime">
            <summary>
            获取系统当前时间。
            </summary>
            <returns>系统当前时间。</returns>
        </member>
        <member name="T:EAS.Sockets.NetInvokeTask">
            <summary>
            网络异步 Invoke 任务，提供简单的异步通信调用。
            </summary>
        </member>
        <member name="T:EAS.TaskBase">
            <summary>
            异步调用任务基类。
            </summary>
        </member>
        <member name="M:EAS.TaskBase.CompleteAction">
            <summary>
            任务完成运作，完成事件之前的处理。
            </summary>
        </member>
        <member name="M:EAS.TaskBase.Complete(System.Exception)">
            <summary>
            任务完成(错误）。
            </summary>
            <param name="error">错误信息。</param>
        </member>
        <member name="M:EAS.TaskBase.Complete(System.Object)">
            <summary>
            任务完成/返回结果。
            </summary>
            <param name="result">返回结果。</param>
        </member>
        <member name="P:EAS.TaskBase.IsComplete">
            <summary>
            是否已经完成。
            </summary>
        </member>
        <member name="P:EAS.TaskBase.TaskResult">
            <summary>
            返回结果。
            </summary>
        </member>
        <member name="P:EAS.TaskBase.Error">
            <summary>
            异常信息。
            </summary>
        </member>
        <member name="P:EAS.TaskBase.HasError">
            <summary>
            是否错误。
            </summary>
        </member>
        <member name="E:EAS.TaskBase.Completed">
            <summary>
            完成事件。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetInvokeTask.CompleteAction">
            <summary>
            已重写，任务完成运作，完成事件之前的处理。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetInvokeTask.Complete(EAS.Sockets.Messages.IMessage)">
            <summary>
            异步网络调用返回消息。
            </summary>
            <param name="message">返回消息。</param>
        </member>
        <member name="P:EAS.Sockets.NetInvokeTask.Message">
            <summary>
            调用结果。
            </summary>
        </member>
        <member name="T:EAS.Data.Binding.IDataBind">
            <summary>
            数据绑定接口。
            </summary>
            <remarks>
            用于定义数据实体同界面的交互绑定机制。
            </remarks>
        </member>
        <member name="E:EAS.Data.Binding.IDataBind.DataEntityChanged">
            <summary>
            当前数据对象发生改变时触发该事件。
            </summary>
        </member>
        <member name="P:EAS.Data.Binding.IDataBind.DataEntity">
            <summary>
            获取或者设置绑定目标对象的数据实体。
            </summary>
        </member>
        <member name="P:EAS.Data.Binding.IDataBind.TDataEntity">
            <summary>
            获取绑定目标对象的数据实体类型。
            </summary>
        </member>
        <member name="T:EAS.FuncTask">
            <summary>
            函数任务回调，有返回值。
            </summary>
        </member>
        <member name="M:EAS.FuncTask.CompleteAction">
            <summary>
            已重写，任务完成运作，完成事件之前的处理。
            </summary>
        </member>
        <member name="P:EAS.FuncTask.Result">
            <summary>
            调用结果。
            </summary>
        </member>
        <member name="T:EAS.FuncTask`1">
            <summary>
            函数任务回调(泛型返回值)。
            </summary>
        </member>
        <member name="P:EAS.FuncTask`1.TResult">
            <summary>
            调用结果。
            </summary>
        </member>
        <member name="T:EAS.Services.MessageHelper">
            <summary>
            消息辅助类。
            </summary>
        </member>
        <member name="M:EAS.Services.MessageHelper.PackageBinary(System.Object)">
            <summary>
            对消息对象打包。
            </summary>
            <param name="msg">消息对象。</param>
            <returns>打包消息。</returns>
        </member>
        <member name="M:EAS.Services.MessageHelper.UnpackageBinary(System.Byte[])">
            <summary>
            解包消息。
            </summary>
            <param name="callPackage">数据包。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.MessageHelper.UnpackageBinary(System.Byte[],System.String)">
            <summary>
            解包消息。
            </summary>
            <param name="callPackage">数据包。</param>
            <param name="url">序列化参数。</param>
            <returns></returns>
        </member>
        <member name="T:EAS.Security.Bytes">
            <summary>
            Bytes对象。
            </summary>
            <remarks>为提供字节处理支持，数据加密、CA认证的基础。</remarks>
        </member>
        <member name="M:EAS.Security.Bytes.#ctor">
            <summary>
            初始化 Bytes 类的实例。
            </summary>
        </member>
        <member name="M:EAS.Security.Bytes.Equals(System.Byte[],System.Byte[])">
            <summary>
            判断给定的两个字节数组是否相等。
            </summary>
            <param name="bytes1">要比较的第一个字节数组。</param>
            <param name="bytes2">要比较的第二个字节数组。</param>
            <returns>如果两个字节数组的长度相同，并且相应下标的元素相等，或者两个字节数组都为空引用，则返回true；否则返回false。</returns>
        </member>
        <member name="M:EAS.Security.Bytes.Merge(System.Byte[],System.Byte[])">
            <summary>
            合并指定的两个字节数组。请注意字节数组的顺序。
            </summary>
            <param name="bytes1">要合并的字节数组1。</param>
            <param name="bytes2">要合并的字节数组2。</param>
            <returns>返回合并后的字节数组。</returns>
            <exception cref="T:System.ArgumentNullException">bytes1 或者 bytes2 为空引用。</exception>
        </member>
        <member name="M:EAS.Security.Bytes.ToString(System.Byte[])">
            <summary>
            将指定的字节数组转换为字符串。该字符串的格式为“xx xx ...”，其中“xx”为每一个字节的十六进制表示。
            </summary>
            <param name="buffer">要转换的字节数组。</param>
            <returns>返回已经转换的字节数组字符串。</returns>
        </member>
        <member name="M:EAS.Security.Bytes.FromString(System.String)">
            <summary>
            将格式为“xx xx ...”的字符串（其中“xx”为每一个字节的十六进制表示）转换为相应的字节数组。
            </summary>
            <param name="s">要转换的字符串。</param>
            <returns>返回转换后的字节数组。</returns>
            <exception cref="T:System.ArgumentNullException">s 为空引用。</exception>
            <exception cref="T:System.ArgumentException">字符串 s 格式无效。</exception>
            <remarks>如果 s 为空字符串，则返回长度为 0 的字节数组。</remarks>
        </member>
        <member name="M:EAS.Security.Bytes.ToBase64String(System.Byte[])">
            <summary>
            将指定的 base64 字节数组转换为 base64 字符串。
            </summary>
            <param name="buffer">要转换的 base64 字节数组。</param>
            <returns>返回  base64 字符串</returns>
            <remarks>使用 Convert.ToBase64String。</remarks>
        </member>
        <member name="M:EAS.Security.Bytes.FromBase64String(System.String)">
            <summary>
            将指定的  base64 字符串转换为 base64 字节数组。
            </summary>
            <param name="s">要转换的 base64 字符串。</param>
            <returns>返回 base64 字节数组。</returns>
            <remarks>使用 Convert.FromBase64String。</remarks>
        </member>
        <member name="T:EAS.Objects.Lifecycle.TransientLifestyleManager">
            <summary>
            组件生存管理周期之Transient，组件在使用时创建、使用后销毁。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.TransientLifestyleManager.#ctor">
            <summary>
            初始化 TransientLifestyleManager 类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.TransientLifestyleManager.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:EAS.Objects.DefaultComponentAdapter">
            <summary>
            DefaultComponentAdapter 的摘要说明。
            </summary>
        </member>
        <member name="T:EAS.Objects.IComponentAdapter">
            <summary>
            组件适配器接口，实现不同的组件适配器，用于管理不同的对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.IComponentAdapter.Create">
            <summary>
            创建一个组件实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.IComponentAdapter.Destroy(System.Object)">
            <summary>
            销毁组件实例。
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.ComponentKey">
            <summary>
            返回组件关联的组件索引键。
            </summary>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.Assembly">
            <summary>
            返回组件所在程序集名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.ComponentImplementation">
            <summary>
            返回组件的实现类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.ServiceType">
            <summary>
            返回组件的接口类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.LifestyleType">
            <summary>
            返回组件的生存方式。
            </summary>
        </member>
        <member name="P:EAS.Objects.IComponentAdapter.Container">
            <summary>
            获取或设置一个值，指示级件适合器的组件容器对象。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultComponentAdapter.container">
            <summary>
            组件容器。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultComponentAdapter.m_ComponentInfo">
            <summary>
            配置定义。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultComponentAdapter._CI">
            <summary>
            构造拦截器。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultComponentAdapter._PI">
            <summary>
            属性拦截器。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.#ctor(EAS.Objects.ComponentInfo)">
            <summary>
            使用组件的键和实现类型初始化组件适配器。
            </summary>
            <param name="componentInfo">组件定义信息。</param>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.#ctor(System.String,System.String,System.Type)">
            <summary>
            使用组件的键和实现类型初始化组件适配器。
            </summary>
            <param name="componentKey">组件的键。</param>
             <param name="assembly">组件所在的程序集名称。</param>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.#ctor(System.String,System.String,System.Type,System.Type)">
            <summary>
            使用组件的键和实现类型初始化组件适配器。
            </summary>
            <param name="componentKey">组件的键。</param>
            <param name="assembly">组件所在的程序集名称。</param>
            <param name="serviceType">组件的接口类型。</param>
            <param name="componentImplementation"> 组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.#ctor(System.String,System.String,System.Type,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            使用组件的键、实现类型及生存方式初始化组件适配器。
            </summary>
            <param name="componentKey">组件的键。</param>
            <param name="assembly">组件所在的程序集名称。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="lifestyleType">组件生存方式。</param>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.#ctor(System.String,System.String,System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
             使用组件的键、接口类型，实现类型及生存方式初始化组件适配器。
            </summary>
            <param name="componentKey">组件的键。</param>
            <param name="assembly">组件所在的程序集名称。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="lifestyleType">组件生存方式。</param>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.Create">
            <summary>
            创建一个组件实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.DefaultComponentAdapter.Destroy(System.Object)">
            <summary>
            销毁组件实例。
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter._ConstructorInjector">
            <summary>
            构造拦截器。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter._PropertyInjector">
            <summary>
            属性拦截器。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.ComponentKey">
            <summary>
            获取一个值，指示组件的键。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.Assembly">
            <summary>
            返回组件所在程序集名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.ServiceType">
            <summary>
            获取一个值，指示组件的接口（服务类型）类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.ComponentImplementation">
            <summary>
            获取一个值，指示组件的实现类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.LifestyleType">
            <summary>
            返回组件的生存方式。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultComponentAdapter.Container">
            <summary>
            获取或设置一个值，指示组件适配器所属的组件容器。
            </summary>
        </member>
        <member name="T:EAS.Services.TextLogger">
            <summary>
            文本文件日志记录器。
            </summary>
            <remarks>
            日志输出到文本文件。
            </remarks>
        </member>
        <member name="T:EAS.Services.ILogger">
            <summary>
            日志记录开器接口。
            </summary>
        </member>
        <member name="M:EAS.Services.ILogger.Info(System.String)">
            <summary>
            记录提示信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Services.ILogger.Warn(System.String)">
            <summary>
            记录警告信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Services.ILogger.Debug(System.String)">
            <summary>
            记录调试信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Services.ILogger.Error(System.String)">
            <summary>
            记录错误信息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Services.ILogger.Error(System.Exception)">
            <summary>
            记录错误信息。
            </summary>
            <param name="exc">异常。</param>
        </member>
        <member name="M:EAS.Services.ILogger.Open">
            <summary>
            打开日志记录器。
            </summary>
        </member>
        <member name="M:EAS.Services.ILogger.Close">
            <summary>
            关闭日志记录器。
            </summary>
        </member>
        <member name="P:EAS.Services.TextLogger.Path">
            <summary>
            日志路径。
            </summary>
        </member>
        <member name="T:EAS.Services.LogLevel">
            <summary>
            日志级别。
            </summary>
        </member>
        <member name="F:EAS.Services.LogLevel.Fatal">
            <summary>
            致命。
            </summary>
        </member>
        <member name="F:EAS.Services.LogLevel.High">
            <summary>
            高。
            </summary>
        </member>
        <member name="F:EAS.Services.LogLevel.Standard">
            <summary>
            普通。
            </summary>
        </member>
        <member name="F:EAS.Services.LogLevel.Low">
            <summary>
            低。
            </summary>
        </member>
        <member name="T:EAS.Services.LoggerManager">
            <summary>
            日志记录器辅助类。
            </summary>
        </member>
        <member name="M:EAS.Services.LoggerManager.GetLogger">
            <summary>
            取得日志记录器。
            </summary>
        </member>
        <member name="T:EAS.Services.Error">
            <summary>
            定义错误对象。
            </summary>
            <remarks>
            该对象包含了一个System.Exception对象中的所有的信息以及其他的信息。
            </remarks>
        </member>
        <member name="M:EAS.Services.Error.#ctor">
            <summary>
            初始化Error 类的实例。
            </summary>
        </member>
        <member name="M:EAS.Services.Error.#ctor(System.Exception)">
            <summary>
            使用指定的异常对象初始化 Error 类的实例，发生时间使用当前时间。
            </summary>
            <param name="exception">新错误对象实例对应的异常对象引用。</param>
        </member>
        <member name="M:EAS.Services.Error.#ctor(System.String)">
            <summary>
            从指定的“.xml”文件中加载 Error 对象。
            </summary>
            <param name="fileName">包含 Error 对象序列化信息的文件。</param>
        </member>
        <member name="M:EAS.Services.Error.#ctor(System.IO.FileStream)">
            <summary>
            从指定的“.xml”文件流中加载 Error 对象。
            </summary>
            <param name="stream">包含 Error 对象序列化信息的二进制文件流。</param>
        </member>
        <member name="M:EAS.Services.Error.SaveFile(System.String)">
            <summary>
            将当前 Error 对象的信息写到错误日志文件（扩展名称.xml）中。
            </summary>
            <param name="path">要保存的异常对象的路径，不能为空引用或者空字符串，如果不存在，则创建该路径。</param>
            <returns>返回已经保存的异常的.xml文件的名称。</returns>
            <exception cref="T:System.InvalidOperationException">无法生成文件名称。</exception>
            <remarks>该方法会创建一个新的文件名称，并将信息写入到该文件中，新的文件名称不会和现有的文件重名。所有的错误日志文件保存在安装目录下的“Errors”文件夹中。</remarks>
        </member>
        <member name="M:EAS.Services.Error.ToString">
            <summary>
            已重写。返回错误对象的详细信息字符串。等效于 ToString(false)。
            </summary>
            <returns>返回 Error 的详细信息字符串。</returns>
        </member>
        <member name="M:EAS.Services.Error.ToString(System.Boolean)">
            <summary>
            返回错误对象的详细信息字符串。
            </summary>
            <param name="html">指示字符串是否应该是 html 格式的，以便在 Web 页面中显示。</param>
            <returns>返回 Error 的详细信息字符串。</returns>
        </member>
        <member name="P:EAS.Services.Error.ExceptionTime">
            <summary>
            获取异常发生的时间。
            </summary>
        </member>
        <member name="P:EAS.Services.Error.ExceptionType">
            <summary>
            获取异常类型。
            </summary>		
        </member>
        <member name="P:EAS.Services.Error.ErrorType">
            <summary>
            获取异常类型。
            </summary>
        </member>
        <member name="P:EAS.Services.Error.Message">
            <summary>
            获取异常的错误信息。
            </summary>
        </member>
        <member name="P:EAS.Services.Error.StackTrace">
            <summary>
            获取异常的堆栈跟踪信息。
            </summary>
        </member>
        <member name="P:EAS.Services.Error.TargetSite">
            <summary>
            获取异常的引发方法。
            </summary>
        </member>
        <member name="P:EAS.Services.Error.Source">
            <summary>
            获取引发异常的对象名称或者应用程序名称。
            </summary>
        </member>
        <member name="T:EAS.NotifyEventArgs">
            <summary>
            应用通知事件参数。
            </summary>
        </member>
        <member name="M:EAS.NotifyEventArgs.#ctor">
            <summary>
            初始化NotifyEnentArgs事件参数。
            </summary>
        </member>
        <member name="M:EAS.NotifyEventArgs.#ctor(System.String,System.Object)">
            <summary>
            初始化NotifyEnentArgs事件参数。
            </summary>
            <param name="topic">主题。</param>
            <param name="message">消息。</param>
        </member>
        <member name="P:EAS.NotifyEventArgs.Topic">
            <summary>
            主题。
            </summary>
        </member>
        <member name="P:EAS.NotifyEventArgs.Message">
            <summary>
            消息。
            </summary>
        </member>
        <member name="T:EAS.Sockets.NetSession">
            <summary>
            网络会话上下文，在服务器表示一个客户端连接上下文。
            </summary>
            <remarks>
            调用Send方法不会触发消息的立即发送，仅把消息加到发送队列之中，而消息的发送工作由一个单独的线程按其排队进行发送。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.NetSession.JoinNetPacket(EAS.Sockets.NetSession,System.Byte[])">
            <summary>
            接收报文并编组。
            </summary>
            <param name="session">会话上下文。</param>
            <param name="buffer">字节流。</param>
        </member>
        <member name="M:EAS.Sockets.NetSession.ProcessMessage(EAS.Sockets.Messages.NetMessage)">
            <summary>
            处理接收消息/是否启用一个新线程？。
            </summary>
            <param name="netMessage">网络消息。</param>
        </member>
        <member name="M:EAS.Sockets.NetSession.AddRequestMessage(EAS.Sockets.Messages.NetMessage)">
            <summary>
            仅能单线程处理，注册回复消息。
            </summary>
            <param name="netMessage">网络消息。</param>
            <returns>注册成功返回true，注册失败返回false。</returns>
        </member>
        <member name="M:EAS.Sockets.NetSession.Listen">
            <summary>
            开始监听接收。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetSession.SendWorkMethod">
            <summary>
            消息发送工作，由发送工作者线程调用。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetSession.Abandon">
            <summary>
            终止会话。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetSession.Abandon(System.EventArgs)">
            <summary>
            终止会话。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetSession.SendData(System.UInt32,EAS.Sockets.Messages.IMessage)">
            <summary>
            向客户端发送一个报文。
            </summary>
            <param name="replyTo">回复消息。</param>
            <param name="message">报文。</param>
        </member>
        <member name="M:EAS.Sockets.NetSession.Send(EAS.Sockets.Messages.NetPacket)">
            <summary>
            发送分组报文。
            </summary>
            <param name="netPacket">发送参数。</param>
        </member>
        <member name="M:EAS.Sockets.NetSession.Reply(System.UInt32,EAS.Sockets.Messages.IMessage)">
            <summary>
            回复指定请求消息。
            </summary>
            <param name="requestID">请示消息实例ID。</param>
            <param name="message">回复消息。</param>
            <remarks>
            实现请示==》响应的消息处理模块。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.NetSession.Reply(EAS.Sockets.Messages.IMessage)">
            <summary>
            回复消息/向客户端发送消息。
            </summary>
            <param name="message">回复消息。</param>
        </member>
        <member name="M:EAS.Sockets.NetSession.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.Server">
            <summary>
            Server对象。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.ClientID">
            <summary>
            客户端ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.ReceveAsyncEventArgs">
            <summary>
            接收Socket异步操作。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.Socket">
            <summary>
            通信Socket。
            </summary>
        </member>
        <member name="E:EAS.Sockets.NetSession.ClientClosed">
            <summary>
            客户端关闭事件。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.SendPackets">
            <summary>
            发送的消息报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.ReceivePackets">
            <summary>
            接收的消息报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.DiscardPackets">
            <summary>
            丢弃的报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.SendMessages">
            <summary>
            发送的消息汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.ReceiveMessages">
            <summary>
            接收的消息汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.SendBytes">
            <summary>
            发送字节汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.ReceiveBytes">
            <summary>
            接收字节汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSession.Tag">
            <summary>
            获取或设置包含有关NetContext的数据的对象。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.DatumRequestMessage">
            <summary>
            基准请求消息，主要用于性能测试。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.DatumRequestMessage.#ctor">
            <summary>
            初始化DatumRequestMessage消息实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.DatumRequestMessage.#ctor(System.String)">
            <summary>
            使用字符串初始化DatumRequestMessage对象。
            </summary>
            <param name="chatText"></param>
        </member>
        <member name="M:EAS.Sockets.Messages.DatumRequestMessage.Load(EAS.Sockets.Messages.MessageReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.DatumRequestMessage.WriteTo(EAS.Sockets.Messages.MessageWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Messages.DatumRequestMessage.Content">
            <summary>
            聊天内容。
            </summary>
        </member>
        <member name="M:EAS.Sockets.HanderManager.AddHander``1(EAS.Sockets.Messages.IMessageHandler{``0})">
            <summary>
            注册消息处理器。
            </summary>
            <typeparam name="T">消息类型。</typeparam>
            <param name="hander">消息处理器。</param>
        </member>
        <member name="M:EAS.Sockets.HanderManager.AddHander``1(EAS.Sockets.Messages.IMessageHandler{``0}[])">
            <summary>
            注册消息处理器。
            </summary>
            <typeparam name="T">消息类型。</typeparam>
            <param name="handers">消息处理器集合。</param>
        </member>
        <member name="M:EAS.Sockets.HanderManager.CreateMessage(EAS.Sockets.Messages.NetMessage)">
            <summary>
            创建消息实例。
            </summary>
            <param name="netMessage">网络消息。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.HanderManager.GetHandler(EAS.Sockets.Messages.NetMessage)">
            <summary>
            获取消息处理器。
            </summary>
            <param name="netMessage">网络消息。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.HanderManager.GetMessageStruct(EAS.Sockets.Messages.NetMessage)">
            <summary>
            求消息结构。
            </summary>
            <param name="netMessage">网络消息。</param>
            <returns>消息结构。</returns>
        </member>
        <member name="M:EAS.Sockets.HanderManager.GetMessageStruct(System.Guid)">
            <summary>
            求消息结构。
            </summary>
            <param name="messageID">消息ID。</param>
            <returns>消息结构。</returns>
        </member>
        <member name="P:EAS.Sockets.HanderManager.MessageStruct.MessageID">
            <summary>
            ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.HanderManager.MessageStruct.Description">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Sockets.HanderManager.MessageStruct.MessageType">
            <summary>
            消息类型。
            </summary>
        </member>
        <member name="P:EAS.Sockets.HanderManager.MessageStruct.HandlerType">
            <summary>
            HandlerType。
            </summary>
        </member>
        <member name="P:EAS.Sockets.HanderManager.MessageStruct.Handler">
            <summary>
            HandlerType。
            </summary>
        </member>
        <member name="T:EAS.Aspect.AspectCrosscutAttribute">
            <summary>
            Aspect横切代理特性。
            </summary>
            <remarks>
            任何需要接受Aspect横切的类，都必须加上这个特性。
            </remarks>
        </member>
        <member name="M:EAS.Aspect.AspectCrosscutAttribute.#ctor">
            <summary>
            初始化AspectCrosscutAttribute对象实例。
            </summary>
        </member>
        <member name="M:EAS.Aspect.AspectCrosscutAttribute.CreateInstance(System.Type)">
            <summary>
            创建受Aspect管理的类的代理类
            </summary>
            <param name="serverType">要创建的类的类型。</param>
            <returns>受Aspect管理的类的代理类。</returns>
        </member>
        <member name="T:EAS.Aspect.AspectMethodAttribute">
            <summary>
            Aspect横切方法属性。
            </summary>
            <remarks>
            任何需要接受Aspect横切的类，都必须加上这个特性。
            </remarks>
        </member>
        <member name="M:EAS.Aspect.AspectMethodAttribute.#ctor">
            <summary>
            初始化AspectMethodAttribute对象实例。
            </summary>
        </member>
        <member name="M:EAS.Aspect.AspectMethodAttribute.GetAspect">
            <summary>
            获取对应的方面(切面)接口。
            </summary>
            <returns>方面(切面)接口。</returns>
        </member>
        <member name="T:EAS.Data.UIAlignment">
            <summary>
            数据对齐方式。
            </summary>
        </member>
        <member name="F:EAS.Data.UIAlignment.Left">
            <summary>
            在对齐。
            </summary>
        </member>
        <member name="F:EAS.Data.UIAlignment.Center">
            <summary>
            居中对齐。
            </summary>
        </member>
        <member name="F:EAS.Data.UIAlignment.Right">
            <summary>
            右对齐。
            </summary>
        </member>
        <member name="T:EAS.Data.AutoUIAttribute">
            <summary>
            界面自动布局属性。
            </summary>
        </member>
        <member name="M:EAS.Data.AutoUIAttribute.#ctor">
            <summary>
            初始化AutoUIAttribute属性。
            </summary>
        </member>
        <member name="M:EAS.Data.AutoUIAttribute.#ctor(System.Int32)">
            <summary>
            初始化AutoUIAttribute属性。
            </summary>
            <param name="width">宽度。</param>
        </member>
        <member name="M:EAS.Data.AutoUIAttribute.#ctor(System.Int32,EAS.Data.UIAlignment)">
            <summary>
            初始化AutoUIAttribute属性。
            </summary>
            <param name="width">宽度。</param>
            <param name="alignment">对齐方式。</param>
        </member>
        <member name="M:EAS.Data.AutoUIAttribute.#ctor(System.String,System.Int32)">
            <summary>
            初始化AutoUIAttribute属性。
            </summary>
            <param name="caption">标题。</param>
            <param name="width">宽度。</param>
        </member>
        <member name="M:EAS.Data.AutoUIAttribute.#ctor(System.String,System.Int32,EAS.Data.UIAlignment)">
            <summary>
            初始化AutoUIAttribute属性。
            </summary>
            <param name="caption">标题。</param>
            <param name="width">宽度。</param>
            <param name="alignment">对齐方式。</param>
        </member>
        <member name="P:EAS.Data.AutoUIAttribute.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:EAS.Data.AutoUIAttribute.Width">
            <summary>
            宽度。
            </summary>
        </member>
        <member name="P:EAS.Data.AutoUIAttribute.Alignment">
            <summary>
            对齐方式。
            </summary>
        </member>
        <member name="P:EAS.Data.AutoUIAttribute.Format">
            <summary>
            显示格式。
            </summary>
        </member>
        <member name="P:EAS.Data.AutoUIAttribute.Index">
            <summary>
            显示顺序号。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceObjectAttribute">
            <summary>
            服务(组件)属性。
            </summary>
            <remarks>
            标记在服务(组件)之上，用于标记组件为一个服务组件。
            </remarks>
        </member>
        <member name="M:EAS.Services.ServiceObjectAttribute.#ctor">
            <summary>
            初始化ServiceObjectAttribute实例。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceObjectAttribute.#ctor(System.String)">
            <summary>
            初始化ServiceObjectAttribute实例。
            </summary>
            <param name="name">服务名称</param>
        </member>
        <member name="M:EAS.Services.ServiceObjectAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化ServiceObjectAttribute实例。
            </summary>
            <param name="name">服务名称</param>
            <param name="description">服务描述</param>
        </member>
        <member name="P:EAS.Services.ServiceObjectAttribute.Name">
            <summary>
            获取服务名称。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceObjectAttribute.Description">
            <summary>
            获取服务名称。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceBindAttribute">
            <summary>
            服务绑定属性。
            </summary>
            <remarks>
            标记在服务(组件)之上，用于实现服务组件与服务契约的绑定。
            </remarks>
        </member>
        <member name="M:EAS.Services.ServiceBindAttribute.#ctor(System.Type)">
            <summary>
            初始化ServiceBindAttribute实例。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceBindAttribute.TContract">
            <summary>
            获取服务契约类型。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.ServiceFactory">
            <summary>
            服务工厂。
            </summary>
            <remarks>
            完成对服务的动态调用。
            </remarks>
        </member>
        <member name="M:EAS.Services.Locators.ServiceFactory.GetService(System.String)">
            <summary>
             获取指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceFactory.GetService``1(System.String)">
            <summary>
             获取指定的服务。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceFactory.Release``1(System.String,``0)">
            <summary>
            获取指定的服务实例。
            </summary>
            <typeparam name="T">服务类型。</typeparam>
            <param name="serviceName">服务名称。</param>
            <param name="service">服务实例。</param>
        </member>
        <member name="M:EAS.Services.Locators.CodeGenerator.GenWebServiceProxy(System.String,System.Type)">
            <summary>
            生成WebService代理。
            </summary>
            <param name="url">服务url。</param>
            <param name="interfaceType">接口类型。</param>
            <returns>代理对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.CodeGenerator.GetAgentClassName(System.String)">
            <summary>
            取得Web service 代理类名称。
            </summary>
            <param name="url">Web service URL。</param>
            <returns>服务代理类名称。</returns>
        </member>
        <member name="T:EAS.Serialization.Serializer">
            <summary>
            序列化辅助类，支持Binary与XML格式。
            </summary>
        </member>
        <member name="M:EAS.Serialization.Serializer.Initialize">
            <summary>
            初始化类型信息以提高序列化处理速度。
            </summary>
        </member>
        <member name="M:EAS.Serialization.Serializer.Serialize(System.Object)">
            <summary>
            使用Binary序列化对象。
            </summary>
            <param name="instance">对象。</param>
            <returns>二进制流。</returns>
        </member>
        <member name="M:EAS.Serialization.Serializer.Deserialize(System.Byte[])">
            <summary>
            使用Binary反序列化对象。
            </summary>
            <param name="buffer">二进制流。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.Serialization.Serializer.Serialize``1(``0)">
            <summary>
            使用Binary序列化对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="instance">对象。</param>
            <returns>二进制流。</returns>
        </member>
        <member name="M:EAS.Serialization.Serializer.Deserialize``1(System.Byte[])">
            <summary>
            使用Binary反序列化对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="buffer">二进制流。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.Serialization.Serializer.SerializeXml``1(``0)">
            <summary>
            使用XML序列化对象
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="instance">对象。</param>
            <returns>XML字符串。</returns>
        </member>
        <member name="M:EAS.Serialization.Serializer.DeserializeXml``1(System.String)">
            <summary>
            反序列化对象。
            </summary>
            <typeparam name="T">对象类型。</typeparam>
            <param name="xml">XML字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="M:EAS.Serialization.Serializer.SerializeXml(System.Type,System.Object)">
            <summary>
            使用XML序列化对象
            </summary>
            <param name="T">对象类型。</param>
            <param name="instance">对象。</param>
            <returns>XML字符串。</returns>
        </member>
        <member name="M:EAS.Serialization.Serializer.DeserializeXml(System.Type,System.String)">
            <summary>
            反序列化对象。
            </summary>
            <param name="T">对象类型。</param>
            <param name="xml">XML字符串。</param>
            <returns>对象实例。</returns>
        </member>
        <member name="T:EAS.Runtime.TypeHelper">
            <summary>
            类型辅助类。
            </summary>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.CanCastTo(System.Type,System.Type)">
            <summary>
            检测两个类型之间是否可以转换,即类似(objec obj is T)。
            </summary>
            <param name="fromType">要进行强制转换的类型。</param>
            <param name="toType">要进行强制转换的目标类型。</param>
            <returns>如果可以进行强制转换则为 true；否则为 false。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetTypeOfProperty(System.Object,System.String)">
            <summary>
            取得属性所在类型。
            </summary>
            <param name="instance">对象实例。</param>
            <param name="propertyName">属性名称。</param>
            <returns>类型。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetTypeOfProperty(System.Type,System.String)">
            <summary>
            取得属性所在类型。
            </summary>
            <param name="type">对象类型。</param>
            <param name="propertyName">属性名称。</param>
            <returns>类型。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetTypeOfMethod(System.Object,System.String,System.Object[])">
            <summary>
            取得方法所在类型。
            </summary>
            <param name="instance">对象实例。</param>
            <param name="methodName">方法名称。</param>
            <param name="args">方法参数。</param>
            <returns>类型。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetTypeOfMethod(System.Type,System.String,System.Type[])">
            <summary>
            取得方法所在类型。
            </summary>
            <param name="type">对象类型。</param>
            <param name="methodName">方法名称。</param>
            <param name="types">方法参数类型列表。</param>
            <returns>类型。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetMethod(System.Object,System.String,System.Object[])">
            <summary>
            取得指定的方法。
            </summary>
            <param name="instance">对象实例。</param>
            <param name="method">方法名称。</param>
            <param name="args">方法参数。</param>
            <returns>与参数相符合的方法。</returns>
        </member>
        <member name="M:EAS.Runtime.TypeHelper.GetMethod(System.Type,System.String,System.Object[])">
            <summary>
            取得指定的方法。
            </summary>
            <param name="type">对象类型。</param>
            <param name="method">方法名称。</param>
            <param name="args">方法参数。</param>
            <returns>与参数相符合的方法。</returns>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.PoolException">
            <summary>
            组件池异常。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.PoolException.#ctor(System.String)">
            <summary>
            使用错误消息初始化 PoolException 组件实例。
            </summary>
            <param name="message">错误消息。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.PoolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化初始化 PoolException 组件实例。
            </summary>
            <param name="info">PoolException反序列化信息。</param>
            <param name="context">反序列化上下文环境。</param>
        </member>
        <member name="T:EAS.Objects.Injection.AbstractInjetor">
            <summary>
            抽象的注入器接口组件。
            </summary>
        </member>
        <member name="T:EAS.Objects.Injection.IInjector">
            <summary>
            组件注入器，完成组件注入机制。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.IInjector.Add(System.String,System.Object)">
            <summary>
            添加注入对象实例，实现由键、键值组成。
            </summary>
            <param name="key">注入键。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Injection.IInjector.Clear">
            <summary>
            清空注入对象实例，实现由键、键值组成。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.IInjector.Inject">
            <summary>
             完成对象的注入，返回一个注入后的对象实例。
            </summary>
            <returns>注入后的对象实例。</returns>
        </member>
        <member name="P:EAS.Objects.Injection.IInjector.ComponentAdapter">
            <summary>
            获取或设置一个值，批示构造器所依赖的组件适配器。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.IInjector.ParentInstance">
            <summary>
            需要注入对象的父组件实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.IInjector.InjectionType">
            <summary>
            获取一个值，该值指标实现类使用何种注入机制。
            </summary>
        </member>
        <member name="F:EAS.Objects.Injection.AbstractInjetor.keyValue">
            <summary>
            保护的内部成员，接受注入的组件中的注入参数集合，在些集合中存储了属性或构造器注入的相关参数。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.AbstractInjetor.#ctor(System.Object)">
            <summary>
            使用接受注入对象实例创建 AbstractInjetor 类实例。
            </summary>
            <param name="parentInstance">注入对象实例。</param>
        </member>
        <member name="M:EAS.Objects.Injection.AbstractInjetor.Add(System.String,System.Object)">
            <summary>
            添加注入对象实例，实现由键、键值组成。
            </summary>
            <param name="key">注入键。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Injection.AbstractInjetor.Clear">
            <summary>
            清空注入对象实例，实现由键、键值组成。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.AbstractInjetor.Inject">
            <summary>
             完成对象的注入，返回一个注入后的对象实例。
            </summary>
            <returns>注入后的对象实例。</returns>
        </member>
        <member name="P:EAS.Objects.Injection.AbstractInjetor.ComponentAdapter">
            <summary>
            获取或设置一个值，批示构造器所依赖的组件适配器。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.AbstractInjetor.ParentInstance">
            <summary>
            需要注入对象的父组件实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.AbstractInjetor.InjectionType">
            <summary>
            获取一个值，该值指标实现类使用何种注入机制。
            </summary>
        </member>
        <member name="T:EAS.Objects.ExceptionStackManager">
            <summary>
            容器异常管理器。
            </summary>
        </member>
        <member name="P:EAS.Objects.ExceptionStackManager.Instance">
            <summary>
            唯一实例。
            </summary>
        </member>
        <member name="T:EAS.Security.DemandAttribute">
            <summary>
            权限验证属性。
            </summary>
            <remarks>
            标记权限模块是否需要验证权限。
            </remarks>
        </member>
        <member name="M:EAS.Security.DemandAttribute.#ctor">
            <summary>
            初始化DemandAttribute对象。
            </summary>
        </member>
        <member name="M:EAS.Security.DemandAttribute.#ctor(System.String)">
            <summary>
            初始化DemandAttribute对象。
            </summary>
            <param name="guid">权限对象Guid。</param>
        </member>
        <member name="M:EAS.Security.DemandAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化DemandAttribute对象。
            </summary>
            <param name="guid">权限对象Guid。</param>
            <param name="name">权限对象名称。</param>
        </member>
        <member name="P:EAS.Security.DemandAttribute.Guid">
            <summary>
            权限对象Guid。
            </summary>
        </member>
        <member name="P:EAS.Security.DemandAttribute.Name">
            <summary>
            权限对象名称。
            </summary>
        </member>
        <member name="T:EAS.Security.DemandIgnoreAttribute">
            <summary>
            权限验证忽略属性。
            </summary>
        </member>
        <member name="M:EAS.Security.DemandIgnoreAttribute.#ctor">
            <summary>
            初始化DemandIgnoreAttribute对象。
            </summary>
        </member>
        <member name="T:EAS.Services.ConsoleLogger">
            <summary>
            控制台日志记录器。
            </summary>
            <remarks>
            日志向控制台打印输出。
            </remarks>
        </member>
        <member name="T:EAS.Sockets.ISocketEngine">
            <summary>
            Socket引擎，Socket网络通信基础类。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketEngine.AddHander``1(EAS.Sockets.Messages.IMessageHandler{``0})">
            <summary>
            注册消息处理器。
            </summary>
            <typeparam name="T">消息类型。</typeparam>
            <param name="hander">消息处理器。</param>
        </member>
        <member name="P:EAS.Sockets.ISocketEngine.Guid">
            <summary>
            通信引擎的全局唯一标识符号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketEngine.IPEndPoint">
            <summary>
            IP地址和端口号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketEngine.IPAddress">
            <summary>
            IP地址。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketEngine.Port">
            <summary>
            端口号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketEngine.MessageMaxSize">
            <summary>
            报文最大长度。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketEngine.PacketSend">
            <summary>
            报文发送完成。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketEngine.PacketReceived">
            <summary>
            报文接收完成。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketEngine.MessageSend">
            <summary>
            消息发送完成。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketEngine.MessagerReceived">
            <summary>
            消息接收完成。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.MessageAttribute">
            <summary>
            消息ID属性。
            </summary>
            <remarks>
            标记网络消息，确定其唯一的ID。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageAttribute.#ctor(System.String)">
            <summary>
            初始化MessageAttribute对象实例。
            </summary>
            <param name="messageID">消息ID。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化MessageAttribute对象实例。
            </summary>
            <param name="messageID">消息ID。</param>
            <param name="description">消息说明。</param>
        </member>
        <member name="P:EAS.Sockets.Messages.MessageAttribute.MessageID">
            <summary>
            消息ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.MessageAttribute.Description">
            <summary>
            消息说明。
            </summary>
        </member>
        <member name="M:EAS.Aspect.AspectsManager.GetAspectInvoke(System.Collections.Generic.List{EAS.Aspect.IAspect})">
            <summary>
            获取相关的IAspectInvoke。
            </summary>
            <param name="aspects">相关的Aspects。</param>
            <returns>IAspectInvoke对象。</returns>
        </member>
        <member name="M:EAS.Aspect.AspectsManager.GetAspect(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            获取相关的Aspects
            </summary>
            <param name="msg">IMessage，包含有关方法调用的信息。</param>
            <returns>Aspect集合。</returns>
        </member>
        <member name="P:EAS.Aspect.AspectsManager.AspectInfos">
            <summary>
            所有的Aspect集合
            </summary>
        </member>
        <member name="P:EAS.Aspect.AspectsManager.Aspects">
            <summary>
            所有的Aspect集合
            </summary>
        </member>
        <member name="T:EAS.Threading.ThreadSafeObject`1">
            <summary>
            提供多线程安全访问内部成员Value。    
            </summary>
            <typeparam name="T">对象类型。</typeparam>
        </member>
        <member name="F:EAS.Threading.ThreadSafeObject`1._tObject">
            <summary>
            值
            </summary>
        </member>
        <member name="F:EAS.Threading.ThreadSafeObject`1._lock">
            <summary>
            锁
            </summary>
        </member>
        <member name="M:EAS.Threading.ThreadSafeObject`1.#ctor">
            <summary>
            线程安全访问内部成员Value类型
            </summary>
        </member>
        <member name="M:EAS.Threading.ThreadSafeObject`1.#ctor(`0)">
            <summary>
            线程安全访问内部成员Value类型
            </summary>
            <param name="defaultValue">内部成员Value成员初始值</param>
        </member>
        <member name="P:EAS.Threading.ThreadSafeObject`1.Value">
            <summary>
            获取或设置内部成员
            </summary>
        </member>
        <member name="T:EAS.Security.IPermissionChecker">
            <summary>
            权限检查接口。
            </summary>
        </member>
        <member name="M:EAS.Security.IPermissionChecker.Demand(System.Guid,System.String)">
            <summary>
            验证模块执行所需要的权限。
            </summary>
            <param name="module">模块。</param>
            <param name="loginID">账号。</param>
            <returns>通过权限检查返回true，否则返回false。</returns>
        </member>
        <member name="T:EAS.Services.Locators.WebServiceInfo">
            <summary>
            Web 服务配置信息。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.WebServiceInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="P:EAS.Services.Locators.WebServiceInfo.Component">
            <summary>
            服务组件名称。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.WebServiceInfo.Url">
            <summary>
            服务url。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.IPoolFactory">
             <summary>
            对象池(Pool)生成工厂接口定义。
             </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.IPoolFactory.Create(System.Int32,System.Int32,EAS.Objects.IComponentAdapter)">
            <summary>
            创建一个对象池接口组件实例。
            </summary>
            <param name="initialsize">对象池的初始大小，即初始对象池在初始化时的容量。</param>
            <param name="maxSize">对象池的最大对象容量。</param>
            <param name="adapter">组件适配器对象。</param>
            <returns>对象池接口组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.IPoolFactory.Create(System.Int32,System.Int32,EAS.Objects.Lifecycle.Pool.PoolMode,EAS.Objects.IComponentAdapter)">
            <summary>
            创建一个对象池接口组件实例。
            </summary>
            <param name="initialsize">对象池的初始大小，即初始对象池在初始化时的容量。</param>
            <param name="maxSize">对象池的最大对象容量。</param>
            <param name="mode">对像池的模式。</param>
            <param name="adapter">组件适配器对象。</param>
            <returns>对象池接口组件实例。</returns>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.IPool">
            <summary>
            对象池接口定义，定义Objects容器所使用的对象池。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.IPool.Request">
            <summary>
            在组件池（Pool）中获取一个组件实例。
            </summary>
            <returns>获取的组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.IPool.Release(System.Object)">
            <summary>
            释放组件池（Pool）中一个组件实例。
            </summary>
            <param name="instance">要释放的组件实例。</param>
        </member>
        <member name="T:EAS.Objects.Injection.ConstructorInjector">
            <summary>
            构造器注入器，完成对象构造函数注入。
            </summary>
            <remarks> 构造注入完成Objects Type 2 构造子注入，两个对象实现的注册使用构造函数进行注入关联。 </remarks>
        </member>
        <member name="M:EAS.Objects.Injection.ConstructorInjector.#ctor">
            <summary>
            初始化 ConstructorInjector 类实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.ConstructorInjector.#ctor(System.Object)">
            <summary>
            使用接受注入对象实例创建 ConstructorInjector 类实例。
            </summary>
            <param name="parentInstance">注入对象实例。</param>
        </member>
        <member name="M:EAS.Objects.Injection.ConstructorInjector.Inject">
            <summary>
            完成对象的注入。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.ConstructorInjector.InjectionType">
            <summary>
            获取一个值，该值指标实现类使用何种注入机制。
            </summary>
        </member>
        <member name="T:EAS.Threading.IWorkerEngine">
            <summary>
            工作者引擎。
            </summary>
        </member>
        <member name="M:EAS.Threading.IWorkerEngine.Initialize">
            <summary>
            初始化工作者引擎。
            </summary>
        </member>
        <member name="M:EAS.Threading.IWorkerEngine.Start">
            <summary>
            启动引擎。
            </summary>
        </member>
        <member name="M:EAS.Threading.IWorkerEngine.Stop">
            <summary>
            停止引擎。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetSessionWorkerThread.AddWork(EAS.Sockets.NetSession)">
            <summary>
            向工作者线程注册发送请求。
            </summary>
            <param name="session">会话。</param>
        </member>
        <member name="M:EAS.Sockets.NetSessionWorkerThread.Start">
            <summary>
            开始工作。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetSessionWorkerThread.Stop">
            <summary>
            停止工作。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ServerStopEventHandler">
            <summary>
            服务器停止事件委托。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ServerStopEventArgs">
            <summary>
            服务器停止事件参数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ServerStopEventArgs.Cancel">
            <summary>
            获取或者设置一个值，该值指示是否要取消停止过程。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ISocketServerBase">
            <summary>
            Socket服务器基类接口。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketServerBase.Send(System.Guid,EAS.Sockets.Messages.IMessage)">
            <summary>
            发送消息。
            </summary>
            <param name="target">消息接收方ID(会话ID)。</param>
            <param name="message">消息。</param>
            <remarks>
            为了兼容Tcp、Udp及客户端、服务端共用，Tcp客户端向服务端发送消息时忽略target参数。
            </remarks>
        </member>
        <member name="P:EAS.Sockets.ISocketServerBase.Sessions">
            <summary>
            客户端会话集合。
            </summary>
        </member>
        <member name="T:EAS.DynamicProxy.IInvocation">
            <summary>
            动态代理调用信息接口。
            </summary>
            <remarks>
            可以理解为动态代理方法调用的上下文环境。
            </remarks>
        </member>
        <member name="M:EAS.DynamicProxy.IInvocation.Proceed(System.Object[])">
            <summary>
            完成方法调用。
            </summary>
            <param name="args">参数。</param>
            <returns>方法调用结果。</returns>
        </member>
        <member name="P:EAS.DynamicProxy.IInvocation.Proxy">
            <summary>
            代理对象。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.IInvocation.Target">
            <summary>
            目标对象。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.IInvocation.Method">
            <summary>
            代理方法。
            </summary>
        </member>
        <member name="T:EAS.Context.IContext">
            <summary>
            对象上下文，定义IOC组件的上下文。
            </summary>
        </member>
        <member name="M:EAS.Context.IContext.IsSingleton(System.String)">
            <summary>
            判定指定名称的组件是生存周期是否为Singleton模式。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的生存周期是否为Singleton模式，是则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.IContext.GetLifestyleType(System.String)">
            <summary>
            根据组件名称获取指定组件的生命周期类型。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的生命周期类型。</returns>
        </member>
        <member name="M:EAS.Context.IContext.ContainsObject(System.String)">
            <summary>
            上下文中是否包含指定名称的组件实例。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>是否包含特定的组件。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.IContext.ContainsObject(System.Type)">
            <summary>
            上下文中是否包含指定类型的组件实例。
            </summary>
            <param name="type">组件接口类型。</param>
            <returns>是否包含特定的组件。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.IContext.GetObject(System.String)">
            <summary>
            根据组件的名称返回一个组件实例。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的实例。</returns>
        </member>
        <member name="M:EAS.Context.IContext.GetObject(System.Type)">
            <summary>
            根据组件的类型返回一个组件实例。
            </summary>
            <param name="type">组件的类型。</param>
            <returns>组件的实例。</returns>
        </member>
        <member name="M:EAS.Context.IContext.GetType(System.String)">
            <summary>
            根据组件的名称返回组件实例的类型。
            </summary>
            <param name="name">组件名称。</param>
            <returns>组件类型。</returns>
        </member>
        <member name="M:EAS.Context.IContext.ConfigureObject(System.Object)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="target">要配置的组件目标对象。</param>
        </member>
        <member name="M:EAS.Context.IContext.ConfigureObject(System.Object,System.String)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="target">要配置的组件目标对象。</param>
            <param name="name">组件名称。</param>
        </member>
        <member name="M:EAS.Context.IContext.ConfigureObject(System.Type)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="type">组件类型。</param>
        </member>
        <member name="M:EAS.Context.IContext.ConfigureObject(System.Type,System.String)">
            <summary>
            在容器中配置组件。
            </summary>		
            <param name="type">组件类型</param>
            <param name="name">组件名称。</param>
        </member>
        <member name="P:EAS.Context.IContext.Container">
            <summary>
            组件容器，获取系统上下文中的组件容器。
            </summary>
        </member>
        <member name="P:EAS.Context.IContext.Item(System.String)">
            <summary>
            索引器，根据名称获取指定的组件实例。
            </summary>
        </member>
        <member name="T:EAS.Aspect.IAspectInvoke">
            <summary>
            定义方面(横切)的调用接口。
            </summary>
            <remarks>
            本接口实现拦截并替换对象现有方法执行的功能，比如实现远程访问等。
            </remarks>
        </member>
        <member name="T:EAS.Aspect.IAspect">
            <summary>
            定义方面(横切面)的接口。
            </summary>
        </member>
        <member name="M:EAS.Aspect.IAspect.BeforeInvoke(EAS.Aspect.IAspectContext)">
            <summary>
            在被拦截的方法执行之前执行.
            </summary>
            <param name="context">上下文,包含方法调用信息。</param>
        </member>
        <member name="M:EAS.Aspect.IAspect.AfterInvoke(EAS.Aspect.IAspectContext)">
            <summary>
            在被拦截的方法执行之前执行.
            </summary>
            <param name="context">上下文,包含方法调用信息。</param>
        </member>
        <member name="M:EAS.Aspect.IAspectInvoke.Invoke(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            拦截并执行对象方法。
            </summary>
            <param name="target">目标对象。</param>
            <param name="method">方法。</param>
            <param name="parameters">方法参数。</param>
            <returns>返回值。</returns>
        </member>
        <member name="F:EAS.Services.Locators.ServiceHelper.instance">
            <summary>
            单实例。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceHelper._lock">
            <summary>
            对象锁。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceHelper.types">
            <summary>
            服务类型缓存。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceHelper.#ctor">
            <summary>
            初始化 ServiceHelper 类实例。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.ServiceHelper.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.ServiceHelper.DefaultContext">
            <summary>
            对象容器。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.ServiceHelper.Container">
            <summary>
            对象容器。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.ServiceHelper.Types">
            <summary>
            对象类型实例。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SocketClient">
             <summary>
            Tcp客户端。
             </summary>
        </member>
        <member name="T:EAS.Sockets.ISocketClient">
            <summary>
            Tcp客户端接口。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketClient.Connect">
            <summary>
            连接Tcp服务器。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketClient.Close">
            <summary>
            关闭与服务器的连接。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketClient.Send(EAS.Sockets.Messages.IMessage)">
            <summary>
            发送消息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.ISocketClient.Invoke(EAS.Sockets.Messages.IMessage)">
            <summary>
            调用消息，用于服务器/客户端应用中的请示==》响应消息的应用。
            </summary>
            <param name="request">请示消息。</param>
            <returns>服务器返回的响应消息。</returns>
        </member>
        <member name="M:EAS.Sockets.ISocketClient.BeginInvoke(EAS.Sockets.Messages.IMessage)">
            <summary>
            异步调用消息，用于服务器/客户端应用中的请示==》响应消息的应用。
            </summary>
            <param name="request">请示消息。</param>
            <returns>包含响应消息的异步任务。</returns>
        </member>
        <member name="P:EAS.Sockets.ISocketClient.ClientState">
            <summary>
            客户端状态。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketClient.Error">
            <summary>
            服务器发生错误时触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketClient.Connected">
            <summary>
            连接服务器后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketClient.Closed">
            <summary>
            断开服务器连接后触发。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketClient.Logger">
            <summary>
            日志记录。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketClient.#ctor">
            <summary>
            初始化TcpClient对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketClient.AddHander``1(EAS.Sockets.Messages.IMessageHandler{``0})">
            <summary>
            注册消息处理器。
            </summary>
            <typeparam name="T">消息类型。</typeparam>
            <param name="hander">消息处理器。</param>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Connect">
            <summary>
            打开与服务器的连接。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketClient.BeginConnect">
            <summary>
            打开与服务器的连接。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Disconnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Close">
            <summary>
            关闭与服务器的连接。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Socket_Connect(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            连接的完成方法
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EAS.Sockets.SocketClient.OnReceiveCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            接收的完成方法
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EAS.Sockets.SocketClient.OnSendCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            发送的完成方法
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Listen">
            <summary>
            开始监听线程的入口函数
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Send(EAS.Sockets.Messages.IMessage)">
            <summary>
            向服务器发送消息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Send(System.Guid,EAS.Sockets.Messages.IMessage,System.Boolean)">
            <summary>
            工作方法。
            </summary>
            <param name="target"></param>
            <param name="message"></param>
            <param name="request"></param>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Send(System.Guid,EAS.Sockets.Messages.NetMessage)">
            <summary>
            工作方法/办事的。
            </summary>
            <param name="target"></param>
            <param name="netMessage"></param>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Send(EAS.Sockets.Messages.NetPacket)">
            <summary>
            发送分组报文。
            </summary>
            <param name="netPacket">发送参数。</param>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Invoke(EAS.Sockets.Messages.IMessage)">
            <summary>
            消息同步调用，实现请求响应消息模式。
            </summary>
            <param name="request">请求消息。</param>
            <returns>返回消息。</returns>
        </member>
        <member name="M:EAS.Sockets.SocketClient.BeginInvoke(EAS.Sockets.Messages.IMessage)">
            <summary>
            异步调用消息，用于服务器/客户端应用中的请示==》响应消息的应用。
            </summary>
            <param name="request">请示消息。</param>
            <returns>包含响应消息的异步任务。</returns>
        </member>
        <member name="M:EAS.Sockets.SocketClient.JoinNetPacket(System.Byte[])">
            <summary>
            接收报文并编组。
            </summary>
            <param name="buffer">字节流。</param>
        </member>
        <member name="M:EAS.Sockets.SocketClient.ProcessMessage(EAS.Sockets.Messages.NetMessage)">
            <summary>
            处理接收消息/是否启用一个新线程？。
            </summary>
            <param name="netMessage">网络消息。</param>
        </member>
        <member name="M:EAS.Sockets.SocketClient.Dispose">
            <summary>
            释放所占用的资源。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.Guid">
            <summary>
            通信引擎的全局唯一标识符号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.MessageMaxSize">
            <summary>
            最大消息大小。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.IPEndPoint">
            <summary>
            IP终结点。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.IPAddress">
            <summary>
            远程IP地址。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.Port">
            <summary>
            端口号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.Logger">
            <summary>
            获取或设置日志记录器。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.ClientState">
            <summary>
            客户状状态。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.LocalEndPoint">
            <summary>
            获取本地终结点信息。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketClient.Error">
            <summary>
            发生错误时触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketClient.Connected">
            <summary>
            打开连接之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketClient.Closed">
            <summary>
            关闭连接之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketClient.PacketSend">
            <summary>
            报文发送完成。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketClient.PacketReceived">
            <summary>
            报文接收完成。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketClient.MessageSend">
            <summary>
            数据发送完成之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketClient.MessagerReceived">
            <summary>
            数据接收完成之后触发。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.SendPackets">
            <summary>
            发送的消息报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.ReceivePackets">
            <summary>
            接收的消息报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.DiscardPackets">
            <summary>
            丢弃的报文汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.SendMessages">
            <summary>
            发送的消息汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.ReceiveMessages">
            <summary>
            接收的消息汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.SendBytes">
            <summary>
            发送字节汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.ReceiveBytes">
            <summary>
            接收字节汇总。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketClient.Tag">
            <summary>
            获取或设置包含有关SocketClient的数据的对象。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SessionAbandonEventHandler">
            <summary>
            会话结束事件的委托。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SessionAbandonEventArgs">
            <summary>
            会话结束事件的参数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SessionAbandonEventArgs.Cancel">
            <summary>
            是否要取消终止会话。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SessionAbandonEventArgs.Session">
            <summary>
            获取会话对象。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ISocketService">
            <summary>
            SocketService服务接口定义。
            </summary>
            <remarks>
            一个Socket服务器可以承载多种/个Socket服务，一个Socket服务处理一种业务，如IM SocketService 处理IM相关的即时通讯业务，而WF SocketService 处理工作流相关的服务，这两种Socket服务可以同时运行在一个Socket服务器之中。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.ISocketService.Initialize(EAS.Sockets.ISocketServerBase)">
            <summary>
            使用ServerEngine初始化SocketService。
            </summary>
            <param name="socketServer">Socket服务器对象。</param>
        </member>
        <member name="M:EAS.Sockets.ISocketService.Start">
            <summary>
            启动Socket服务。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketService.Stop">
            <summary>
            停止Socket服务。
            </summary>
        </member>
        <member name="T:EAS.Compressor">
            <summary>
            数据压缩。
            </summary>
        </member>
        <member name="M:EAS.Compressor.Compress(System.Byte[])">
            <summary>
            压缩数据。
            </summary>
            <param name="buffer">待压缩的数据。</param>
            <returns>完成压缩的数据。</returns>
        </member>
        <member name="M:EAS.Compressor.Decompress(System.Byte[])">
            <summary>
            压缩数据。
            </summary>
            <param name="buffer">待压缩的数据。</param>
            <returns>完成压缩的数据。</returns>
        </member>
        <member name="T:EAS.Security.Hash">
            <summary>
            Hash对象。
            </summary>
            <remarks> 为提供散列算法支持，CA认证的基础。为散列提供方法支持。散列算法可以用于进行数字签名。</remarks>
        </member>
        <member name="M:EAS.Security.Hash.#ctor">
            <summary>
            初始化 Hash 类的实例。
            </summary>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.Byte[])">
            <summary>
            计算指定字节数组的哈希值。返回长度为32的字节数组。
            </summary>
            <param name="bytes">要计算其哈希代码的输入。</param>
            <returns>计算所得的哈希代码。该代码长度为32个字节。</returns>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.Byte[],System.Int32)">
            <summary>
            计算指定字节数组的哈希值。返回指定长度（20、32、48、64）的字节数组。
            </summary>
            <param name="bytes">要计算其哈希代码的输入。</param>
            <param name="length">指定希望的哈希代码的长度，单位为字节，目前支持的长度为20、32、48、64。</param>
            <returns>计算所得的哈希代码。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">length 不是20、32、48或者64。</exception>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.IO.Stream)">
            <summary>
            计算Stream的哈希值。返回长度为32的字节数组。
            </summary>
            <param name="stream">要计算其哈希代码的输入。</param>
            <returns>计算所得的哈希代码。该代码长度为32个字节。</returns>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.IO.Stream,System.Int32)">
            <summary>
            计算Stream的哈希值。返回指定长度（20、32、48、64）的字节数组。
            </summary>
            <param name="stream">要计算其哈希代码的输入。</param>
            <param name="length">指定希望的哈希代码的长度，单位为字节，目前支持的长度为20、32、48、64。</param>
            <returns>计算所得的哈希代码。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">length 不是20、32、48或者64。</exception>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算指定字节数组的指定区域的哈希值。返回长度为32的字节数组。
            </summary>
            <param name="bytes">要计算其哈希代码的输入。</param>
            <param name="offset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="count">数组中用作数据的字节数。</param>
            <returns>计算所得的哈希代码。该代码长度为32个字节。</returns>
        </member>
        <member name="M:EAS.Security.Hash.Compute(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            计算指定字节数组的指定区域的哈希值。返回指定长度（20、32、48、64）的字节数组。
            </summary>
            <param name="bytes">要计算其哈希代码的输入。</param>
            <param name="offset">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="count">数组中用作数据的字节数。</param>
            <param name="length">指定希望的哈希代码的长度，单位为字节，目前支持的长度为20、32、48、64。</param>
            <returns>计算所得的哈希代码。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">length 不是20、32、48或者64。</exception>
        </member>
        <member name="T:EAS.Objects.ComponentInfo">
            <summary>
            用于描述一个动态加载的类对象的属性，构造器信息的类。
            </summary>
        </member>
        <member name="M:EAS.Objects.ComponentInfo.#ctor">
            <summary>
            初始化 ComponentInfo 实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.ComponentInfo.#ctor(System.Type,System.Type)">
            <summary>
            初始化 ComponentInfo 实例。
            </summary>
            <param name="TService">服务类型。</param>
            <param name="T">实例类型。</param>
        </member>
        <member name="M:EAS.Objects.ComponentInfo.#ctor(System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            初始化 ComponentInfo 实例。
            </summary>
            <param name="TService">服务类型。</param>
            <param name="T">实例类型。</param>
            <param name="lifestyle">生命周期。</param>
        </member>
        <member name="M:EAS.Objects.ComponentInfo.GetComponentType">
            <summary>
            取对象类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.ComponentInfo.ToString">
            <summary>
            返回表示当前对象的的System.String。
            </summary>
            <returns>System.String，表示当前的 System.Object。</returns>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Name">
            <summary>
            获取或设置一个值，批示对象名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Assembly">
            <summary>
            获取或设置一个值，批示对象所在的程序集名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Type">
            <summary>
            获取或设置一个值，批示对象的类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Lifestyle">
            <summary>
            获取或设置一个值，批示对象的生命周期方式。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Properties">
            <summary>
            获取或设置一个值，指示对象的属性列表。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Constructors">
            <summary>
            获取或设置一个值，批示对象的构造器列表。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.Parameters">
            <summary>
            获取或设置一个值，批示对象的构造过程需要的相关参数。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.TService">
            <summary>
            组件服务类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentInfo.T">
            <summary>
            组件服务类型。
            </summary>
        </member>
        <member name="T:EAS.Objects.ConstructorInfo">
            <summary>
            Objects容器中对于对象构造注入的属性信息。
            </summary>
        </member>
        <member name="M:EAS.Objects.ConstructorInfo.#ctor">
            <summary>
            初始化 ConstructorInfo 类实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.ConstructorInfo.Index">
            <summary>
            获取或设置一个值，批示构造器参数索引。
            </summary>
        </member>
        <member name="P:EAS.Objects.ConstructorInfo.Type">
            <summary>
            获取或设置一个值，批示构造参数的数据类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.ConstructorInfo.Expression">
            <summary>
            获取或设置一个值，批示构造参数的表达式。
            </summary>
        </member>
        <member name="T:EAS.Modularization.AddInAttribute">
            <summary>
            EAS.NET插件属性。
            </summary>
            <remarks>
            提供IAddIn的标记实现,提供基于属性标记的插件实现。
            </remarks>
        </member>
        <member name="M:EAS.Modularization.AddInAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化AddInAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
        </member>
        <member name="M:EAS.Modularization.AddInAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化AddInAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
            <param name="description">模块说明。</param>
        </member>
        <member name="M:EAS.Modularization.AddInAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化AddInAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
            <param name="group">模块分组。</param>
            <param name="description">模块说明。</param>
        </member>
        <member name="P:EAS.Modularization.AddInAttribute.Guid">
            <summary>
            模块Guid。
            </summary>
        </member>
        <member name="P:EAS.Modularization.AddInAttribute.Name">
            <summary>
            模块名称。
            </summary>
        </member>
        <member name="P:EAS.Modularization.AddInAttribute.Group">
            <summary>
            模块分组。
            </summary>
        </member>
        <member name="P:EAS.Modularization.AddInAttribute.Description">
            <summary>
            模块说明。
            </summary>
        </member>
        <member name="T:EAS.Modularization.AddInStartAttribute">
            <summary>
            模块入口方法属性。
            </summary>
            <remarks>
            配合 AddInAttribute实现基于标记的IAddIn模块。
            </remarks>
        </member>
        <member name="M:EAS.Modularization.AddInStartAttribute.#ctor">
            <summary>
            初始化ModuleStartAttribute对象。
            </summary>
        </member>
        <member name="T:EAS.Sockets.MessageSendArgs">
            <summary>
            数据发送参数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageSendArgs.NetMessage">
            <summary>
            网络消息。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageSendArgs.Message">
            <summary>
            高层消息。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageSendArgs.Packets">
            <summary>
            分组消息。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageSendArgs.Session">
            <summary>
            会话上下文。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageSendArgs.Packet">
            <summary>
            当前发送报文。
            </summary>
        </member>
        <member name="M:EAS.Reflection.PropertyAccessor.GetPropertyInvoker(System.Type,System.String)">
            <summary>
            This function return a delgate to the target Property Get MethodName.
            Using the returning deletege you can call the target procedures so fast.
            </summary>
            <param name="PropertyName">The taget property name</param>
            <param name="TargetType">The taget property type</param>
            <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="M:EAS.Reflection.PropertyAccessor.SetPropertyInvoker(System.Type,System.String)">
            <summary>
            This function return a delgate to the target Property Set MethodName.
            Using the returning deletege you can call the target procedures so fast.
            </summary>
            <param name="PropertyName">The taget property name</param>
            <param name="TargetType">The taget property type</param>
            <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="M:EAS.Reflection.PropertyAccessor.GetPropertyInvoker(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            This function return a delgate to the target Property Get MethodName.
            Using the returning deletege you can call the target procedures so fast.
            </summary>
            <param name="TargetType">The taget type</param>
            <param name="Property">The taget MethodName information</param>
            <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="M:EAS.Reflection.PropertyAccessor.SetPropertyInvoker(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            This function return a delgate to the target Property Get MethodName.
            Using the returning deletege you can call the target procedures so fast.
            </summary>
            <param name="TargetType">The taget type</param>
            <param name="Property">The taget MethodName information</param>
            <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="M:EAS.Reflection.MethodInvoker.GetMethodInvoker(System.Reflection.MethodInfo)">
            <summary>
            This function return a delgate to the target procedures.
            Using the returning deletege you can call the target procedures so fast.
            </summary>
            <param name="Method">The taget MethodName information</param>
            <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="M:EAS.Reflection.MethodInvoker.GetMethodInvoker(System.Type,System.String)">
             <summary>
             This function return a delgate to the target procedures.
             Using the returning deletege you can call the target procedures so fast.
             </summary>
            <param name="TargetType">Target object type.</param>
             <param name="MethodName">Method name.</param>
             <returns>The Fast Invoke Handler delegate</returns>
        </member>
        <member name="T:EAS.Workflow.IWorkflowRuntime">
            <summary>
            工作流运行时环境接口。
            </summary>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.CreateWorkflow(System.Object,EAS.Workflow.IWorkflowDataEntity)">
            <summary>
            创建工作流实例。
            </summary>
            <param name="wfAddIn">工作流插件。</param>
            <param name="wfData">工作流业务数据。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Submit(System.Object)">
            <summary>
            申请提交。
            </summary>
            <param name="wfAddIn">工作流插件。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Approval(System.Object)">
            <summary>
            审批提交。
            </summary>
            <param name="wfAddIn">工作流插件。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Submit(System.Guid,System.String,System.String)">
            <summary>
            申请提交。
            </summary>
            <param name="instanceID">实例ID。</param>
            <param name="loginID">提交账号。</param>
            <param name="comment">提交原因。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.Approval(System.Guid,System.String,System.Boolean,System.String)">
            <summary>
            审批提交。
            </summary>
            <param name="instanceID">实例ID。</param>
            <param name="loginID">审批账号。</param>
            <param name="result">审批结果。</param>
            <param name="comment">审批意见。</param>
            <returns>工作流返回结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.GetWorkFlowResult(System.Guid)">
            <summary>
            获取流程实例当前处理结果。
            </summary>
            <param name="instanceID">实例ID。</param>
            <returns>流程处理结果。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowRuntime.GetWorkflowDataEntity(System.Guid)">
            <summary>
            获取流程实例的数据对象。
            </summary>
            <param name="instanceID">实例ID。</param>
            <returns>流程处理结果。</returns>
        </member>
        <member name="T:EAS.InvokeTask">
            <summary>
            普通任务回调/无返回值。
            </summary>
        </member>
        <member name="M:EAS.InvokeTask.CompleteAction">
            <summary>
            已重写，任务完成运作，完成事件之前的处理。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.DotNetRemotingInfo">
            <summary>
            Net Remoting 服务配置信息
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.DotNetRemotingInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="P:EAS.Services.Locators.DotNetRemotingInfo.Component">
            <summary>
            服务组件名称。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.DotNetRemotingInfo.Url">
            <summary>
            服务url。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.SingletonLifestyleManager">
            <summary>
            组件生存管理周期之Singleton，组件一旦自在，则在所有的客商端中共享。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.SingletonLifestyleManager.#ctor">
            <summary>
            初始化 SingletonLifestyleManager 类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.SingletonLifestyleManager.Resolve">
            <summary>
            组件生命周期管理，返回一个组件实例。
            </summary>
            <returns>按照规定的组件生命周期分配的一个组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.SingletonLifestyleManager.Release(System.Object)">
            <summary>
            组件生命周期管理，释放组件实例。
            </summary>
            <param name="instance">需要释放的组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.SingletonLifestyleManager.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.DefaultPool">
            <summary>
            默认的对象池(IPool)接口组件。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.#ctor(System.Int32,System.Int32,EAS.Objects.IComponentAdapter)">
            <summary>
            根据组件池的初始化容量、最大容量以及组件适配器初始化 DefaultPool实例。
            </summary>
            <param name="initialsize">对象池的初始化大小。</param>
            <param name="maxsize">对象池的最大可容纳对象数。</param>
            <param name="componentAdapter">组件适配器。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.#ctor(System.Int32,System.Int32,EAS.Objects.Lifecycle.Pool.PoolMode,EAS.Objects.IComponentAdapter)">
            <summary>
            根据组件池的初始化容量、最大容量以及组件适配器初始化 DefaultPool实例。
            </summary>
            <param name="initialsize">对象池的初始化大小。</param>
            <param name="maxsize">对象池的最大可容纳对象数。</param>
            <param name="mode">对象池管理模式。</param>
            <param name="componentAdapter">组件适配器。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.Request">
            <summary>
            在组件池（Pool）中获取一个组件实例。
            </summary>
            <returns>获取的组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.Release(System.Object)">
            <summary>
            释放组件池（Pool）中一个组件实例。
            </summary>
            <param name="instance">要释放的组件实例。</param>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPool.InitPool">
            <summary>
            初始化对象池。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.DefaultLifestyleManagerFactory">
            <summary>
            系统默认的接口ILifestyleManagerFactory实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.DefaultLifestyleManagerFactory.#ctor">
            <summary>
            初始化 DefaultLifestyleManagerFactory 类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.DefaultLifestyleManagerFactory.Create(EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="lifestyleType">组件的生命周期方式枚举。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.DefaultLifestyleManagerFactory.Create(EAS.Objects.ComponentInfo)">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="componentInfo">组件相关属性描述。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.DefaultLifestyleManagerFactory.Create(EAS.Objects.Lifecycle.LifestyleType,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建一个ILifestyleManager接口实例组件。
            </summary>
            <param name="lifestyleType">组件的生命周期方式枚举。</param>
            <param name="parameters" >组件生存周期相关参数。</param>
            <returns>与生存周期匹配的 ILifecycleManager 对象实例。</returns>
        </member>
        <member name="T:EAS.Objects.DefaultContainer">
            <summary>
            DefaultContainer 的摘要说明。
            </summary>
        </member>
        <member name="T:EAS.Objects.IContainer">
            <summary>
            的组件容器，组件容器管理组件的生存，也是对外提供的一个接口。
            </summary>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``1">
            <summary>
            根据组件实现类型向容器注册组件实现。
            </summary>		
            <typeparam name="T">组件类型信息。</typeparam>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``1(System.String)">
            <summary>
            根据组件组件Key及组件实现类型向容器注册组件实现。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``2">
            <summary>
            根据组件服务类型及实现类型向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``2(System.String)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``2(System.String,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
            <param name="lifestyleType">生命周期策略。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent``2(System.String,EAS.Objects.Lifecycle.LifestyleType,System.String)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
            <param name="lifestyleType">生命周期策略。</param>
            <param name="lifestyleParameters">生命周期参数。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.HasComponent``1">
            <summary>
            根据组件接口类型判断组件容器是否含指定key的组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>存在匹配的组件则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstance``1(System.String)">
            <summary>
            根据组件的key取得组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件的key。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstance``1">
            <summary>
            根据组件的类型取得组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstances``1">
            <summary>
            根据组件类型取得组件实例列表。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>组件实例列表。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(EAS.Objects.ComponentInfo)">
            <summary>
            根据组件组件信息向容器注册组件实现。
            </summary>
            <param name="componentInfo">组件信息。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.String,System.Type)">
            <summary>
            根据组件组件key及组件实现类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation"></param>		
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>
            根据组件key、接口类型及实现类型中注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.String,System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="lifestyleType"> 组件生命周期方式。 </param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.String,System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType,System.String)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="lifestyleType"> 组件生命周期方式。 </param>
            <param name="lifestyleParameters"> 组件生命周期相关参数，参数为一个字符串，其中由“：”分隔。 </param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.Type)">
            <summary>
            根据组件实现类型向容器注册组件实现。
            </summary>		
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponent(System.Type,System.Type)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.RemoveComponent(System.String)">
            <summary>
            从容器中卸载指定的组件。
            </summary>
            <param name="componentKey">组件key。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponentInstance(System.Object)">
            <summary>
            根据组件实例向组件容器中注册组件。
            </summary>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponentInstance(System.String,System.Object)">
            <summary>
            根据组件key及组件实现向组件容器中注册组件。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponentInstance(System.Type)">
            <summary>
            根据组件实现类型向组件容器中注册组件。
            </summary>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>
            根据组件key、接口类型及组件实例向组件容器中注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.HasComponent(System.String)">
            <summary>
            根据组件key判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="componentKey">组件key。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.IContainer.HasComponent(System.Object)">
            <summary>
            根据组件实例判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="componentInstance">组件实例。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.IContainer.HasComponent(System.Type)">
            <summary>
            根据组件接口类型判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.IContainer.ReleaseComponent(System.Object)">
            <summary>
            根据组件实例从组件容器中释放组件实例。
            </summary>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstance(System.String)">
            <summary>
            根据组件的key取得组件实例。
            </summary>
            <param name="componentKey">组件的key。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstance(System.Type)">
            <summary>
            根据组件的类型取得组件实例。
            </summary>
            <param name="serviceType">组件类型。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentInstances(System.Type)">
            <summary>
            根据组件类型取得组件实例列表。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns>组件实例列表。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentAdapter(System.String)">
            <summary>
            根据组件key取得与组件相关的组件适配器。
            </summary>
            <param name="componentKey">组件的key。</param>
            <returns>指定组件的组件适配器。</returns>
        </member>
        <member name="M:EAS.Objects.IContainer.GetComponentAdapter(System.Type)">
            <summary>
            根据组件类型取得与组件相关的组件适配器。
            </summary>
            <param name="componentType">组件类型。</param>
            <returns>指定组件类型的组件适配器。</returns>
        </member>
        <member name="P:EAS.Objects.IContainer.Name">
             <summary>
            获取容器名称。
             </summary>
        </member>
        <member name="P:EAS.Objects.IContainer.ComponentInfos">
            <summary>
            组织配置信息。
            </summary>
        </member>
        <member name="P:EAS.Objects.IContainer.ComponentAdapters">
            <summary>
            获取一个值，该值批示组件容器中的所有组件适配器列表。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.m_ComponentInfos">
            <summary>
            组件配置定义。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.componentInstances">
            <summary>
            私有内部成员，组件容器中的所有注册组件实例。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.lifecycleManagers">
            <summary>
            私有内部成员，组件容器中的组件生存期管理对象集合。其值为组件键/生存期管理对象接口实例。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.componentAdapters">
            <summary>
            私有内部成员，组件容器中的组件适配器对象集合。其值为组件键/组件适配器接口实例。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.name">
            <summary>
            容器名称。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer._AssemblyLoader">
            <summary>
            程序集装载器。
            </summary>
        </member>
        <member name="F:EAS.Objects.DefaultContainer.fInitialize">
            <summary>
            是否已初始化。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.#ctor">
            <summary>
            初始化 DefaultContainer 实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.#ctor(EAS.Objects.IAssemblyLoader)">
            <summary>
            初始化 DefaultContainer 实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.Finalize">
            <summary>
            DefaultContainer 对象析构函数
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.Initialize">
            <summary>
            初始化组件容器。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(EAS.Objects.ComponentInfo)">
            <summary>
            根据组件组件信息向容器注册组件实现。
            </summary>
            <param name="componentInfo">组件信息。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.String,System.Type)">
            <summary>
            根据组件组件key及组件实现类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation"></param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>
            根据组件key、接口类型及实现类型中注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.String,System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="lifestyleType"> 组件生命周期方式。 </param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.String,System.Type,System.Type,EAS.Objects.Lifecycle.LifestyleType,System.String)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="lifestyleType"> 组件生命周期方式。 </param>
            <param name="lifestyleParameters"> 组件生命周期相关参数，参数为一个字符串，其中由“：”分隔。 </param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.Type)">
            <summary>
            根据组件实现类型向容器注册组件实现。
            </summary>		
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.Type,System.Type)">
            <summary>
            根据组件实现类型及组件接口类型向容器注册组件实现。
            </summary>
            <param name="componentImplementation">组件实现类型。</param>
            <param name="serviceType">组件接口类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.Object)">
            <summary>
            根据组件实例向组件容器中注册组件。
            </summary>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.Type)">
            <summary>
            根据组件实现类型向组件容器中注册组件。
            </summary>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.String,System.Type)">
            <summary>
            根据组件key、组件实现向组件容器中注册组件。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentImplementation">组件实现类型。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.String,System.Object)">
            <summary>
            根据组件key及组件实现向组件容器中注册组件。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.String,System.Type,System.Object)">
            <summary>
            根据组件key、接口类型及组件实例向组件容器中注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponentInstance(System.String,System.Type,System.Object,EAS.Objects.Lifecycle.LifestyleType,System.String)">
            <summary>
            根据组件key、接口类型、组件实例及组件生存类型向组件容器中注册组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="serviceType">组件接口类型。</param>
            <param name="componentInstance">组件实例。</param>
            <param name="lifestyleType"> 组件生命周期方式。 </param>
            <param name="lifestyleParameters"> 组件生命周期相关参数，参数为一个字符串，其中由“：”分隔。 </param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.RemoveComponent(System.String)">
            <summary>
            根据组件key从组件容器中移除组件实现。
            </summary>
            <param name="componentKey">组件key。</param>		
        </member>
        <member name="M:EAS.Objects.DefaultContainer.RemoveComponent(System.Object)">
            <summary>
            根据组件实例从组件容器中移除组件实现。
            </summary>
            <param name="componentInstance">组件实例。</param>		
        </member>
        <member name="M:EAS.Objects.DefaultContainer.RemoveComponent(System.String,System.Object)">
            <summary>
            根据组件key及组件实例从组件容器中移除组件实现。
            </summary>
            <param name="componentKey">组件key。</param>
            <param name="componentInstance">组件实例。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.HasComponent(System.String)">
            <summary>
            根据组件key判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="componentKey">组件key。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.HasComponent(System.Object)">
            <summary>
            根据组件实例判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="componentInstance">组件实例。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.HasComponent(System.Type)">
            <summary>
            根据组件接口类型判断组件容器是否含指定key的组件实例。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.ReleaseComponent(System.Object)">
            <summary>
            根据组件实例从组件容器中释放组件实例。
            </summary>
            <param name="componentInstance">组件实例。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.ReleaseComponent(System.String)">
            <summary>
            根据组件Key从组件容器中释放组件实例。
            </summary>
            <param name="componentKey">组件Key。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstance(System.String)">
            <summary>
            根据组件的key取得组件实例。
            </summary>
            <param name="componentKey">组件的key。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstance(System.Type)">
            <summary>
            根据组件的类型取得组件实例。
            </summary>
            <param name="serviceType">组件类型。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetServiceComponentInstance(System.Type)">
            <summary>
            根据组件服务类型取得组件实例。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstances(System.Type)">
            <summary>
            根据组件类型取得组件实例列表。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns>组件实例列表。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentAdapter(System.String)">
            <summary>
            根据组件key取得与组件相关的组件适配器。
            </summary>
            <param name="componentKey">组件的key。</param>
            <returns>指定组件的组件适配器。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentAdapter(System.Type)">
            <summary>
            根据组件类型取得与组件相关的组件适配器。
            </summary>
            <param name="componentType">组件类型。</param>
            <returns>指定组件类型的组件适配器。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentAdapters(System.Type)">
            <summary>
            根据组件类类型获取组件适配器列表。
            </summary>
            <param name="serviceType">组件接口类型。</param>
            <returns>指定组件类型的组件适配器列表。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetLifecycleManager(System.String)">
            <summary>
            根据组件key取得与组件相关的组件生命周期管理器。
            </summary>
            <param name="componentKey"> 组件的键。</param>
            <returns>指定组件键的生命周期管理器。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetLifecycleManager(System.Type)">
            <summary>
            根据组件实现类型取得与组件相关的组件生命周期管理器。
            </summary>
            <param name="componentType"> 组件的实现类型。 </param>
            <returns>指定组件类型的生命周期管理器。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetLifecycleManagers(System.Type)">
            <summary>
            根据组件接口类型取得与组件相关的组件生命周期管理器。
            </summary>
            <param name="serviceType"> 组件的接口类型。 </param>
            <returns>指定组件类型的生命周期管理器。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``1">
            <summary>
            根据组件实现类型向容器注册组件实现。
            </summary>		
            <typeparam name="T">组件类型信息。</typeparam>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``1(System.String)">
            <summary>
            根据组件组件key及组件实现类型向容器注册组件实现。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件key。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``2">
            <summary>
            根据组件服务类型及实现类型向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``2(System.String)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``2(System.String,EAS.Objects.Lifecycle.LifestyleType)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
            <param name="lifestyleType">生命周期策略。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent``2(System.String,EAS.Objects.Lifecycle.LifestyleType,System.String)">
            <summary>
            根据组件服务类型、实现类型及生命周期参数向容器注册组件实现。
            </summary>
            <typeparam name="TService">组件服务类型。</typeparam>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件Key。</param>
            <param name="lifestyleType">生命周期策略。</param>
            <param name="lifestyleParameters">生命周期参数。</param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.HasComponent``1">
            <summary>
            根据组件接口类型判断组件容器是否含指定key的组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>存在匹配的组件则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstance``1(System.String)">
            <summary>
            根据组件的key取得组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <param name="componentKey">组件的key。</param>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstance``1">
            <summary>
            根据组件的类型取得组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetServiceComponentInstance``1">
            <summary>
            根据组件服务类型取得组件实例。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.GetComponentInstances``1">
            <summary>
            根据组件类型取得组件实例列表。
            </summary>
            <typeparam name="T">组件类型信息。</typeparam>
            <returns>组件实例列表。</returns>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.AddComponent(System.String)">
            <summary>
            内部方法。
            </summary>
            <param name="componentKey"></param>
        </member>
        <member name="M:EAS.Objects.DefaultContainer.OutputAdapters">
            <summary>
            输出适配器定义。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.Name">
             <summary>
            获取容器名称。
             </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.ComponentInfos">
            <summary>
            组织配置信息。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.Item(System.String)">
            <summary>
            组件索引器，获取指定Key值的组件实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.Item(System.Type)">
            <summary>
            组件索引器，获取指定接口类型的组件实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.ComponentInstances">
            <summary>
            获取一个值，批示容器中所有的组件实例列表。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.ComponentAdapters">
            <summary>
            获取一个值，该值批示组件容器中的所有组件适配器列表。
            </summary>
        </member>
        <member name="P:EAS.Objects.DefaultContainer.LifecycleManagers">
            <summary>
            获取一个值，该值批示组件容器中的所有组件生命周期管理器列表。
            </summary>
        </member>
        <member name="T:EAS.Objects.XmlInterpreter">
            <summary>
            XML配置翻译器。
            </summary>
        </member>
        <member name="M:EAS.Objects.XmlInterpreter.Interpret(System.String)">
            <summary>
            翻译指定URL配置信息。
            </summary>
            <param name="m_Url">配置信息url。</param>
            <returns>组件配置记录。</returns>
        </member>
        <member name="M:EAS.Objects.XmlInterpreter.Interpret(System.Xml.XmlNode)">
            <summary>
            翻译指定XML节点配置信息。
            </summary>
            <param name="m_Node">XML节点。</param>
            <returns>组件配置记录。</returns>
        </member>
        <member name="T:EAS.Sockets.Messages.NetPacket">
            <summary>
            消息报文，在网络之间传输的消息。
            </summary>
            <remarks>
            编码格式：16字节(128位)标字位[GUID]+4字节消息ID+2报文索引+2报文总数+2字节数据大小]+数据，报文头共26字节，消息报文最大8K。//2013/04/25
            </remarks>
        </member>
        <member name="F:EAS.Sockets.Messages.NetPacket.PacketMaxSize">
            <summary>
            消息报文最大大小，8K/4K/2K/1K。
            </summary>
        </member>
        <member name="F:EAS.Sockets.Messages.NetPacket.PacketHeadSize">
            <summary>
            消息报文关大小，目前26字节。
            </summary>
        </member>
        <member name="F:EAS.Sockets.Messages.NetPacket.PacketDataSize">
            <summary>
            消息报文数据大小，PacketMaxSize - 26/报文头。
            </summary>
        </member>
        <member name="F:EAS.Sockets.Messages.NetPacket.PacketFlags">
            <summary>
            消息标志码。固定值=Guid(一个固定值);
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacket.CheckNetPacket(System.Byte[])">
            <summary>
            检查报文是否为合法报文。
            </summary>
            <param name="buffer">消息缓存。</param>
            <returns>验证成功返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacket.#ctor">
            <summary>
            初始化NetPacket实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacket.#ctor(System.Byte[])">
            <summary>
            使用字节流初始化NetPacket实例。
            </summary>
            <param name="bytes">字节流。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.NetPacket.ToBytes">
            <summary>
            转换消息为字节流。
            </summary>
            <returns>消息对应的字节流。</returns>
        </member>
        <member name="P:EAS.Sockets.Messages.NetPacket.InstanceId">
            <summary>
            消息实例ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.NetPacket.Length">
            <summary>
            有效报文长度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.NetPacket.Index">
            <summary>
            报文顺序号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.NetPacket.Count">
            <summary>
            报文总数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.NetPacket.Data">
            <summary>
            报文内容。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ClientState">
            <summary>
            表示服务器的当前状态。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ClientState.Connecting">
            <summary>
            客户端已经连接到服务器。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ClientState.Closed">
            <summary>
            客户端连接已经关闭。
            </summary>
        </member>
        <member name="T:EAS.DynamicProxy.IDynamicProxy">
            <summary>
            动态代理接口。
            </summary>
            <remarks>
            在AgileEAS.NET平台之中，通过动态代理来完成服务/业务代理与服务/业务组件的桥接做用，也就是说代理可以一个真实的对象，也可以指向虚对象，方法的执行由拦截器负责。
            </remarks>
        </member>
        <member name="P:EAS.DynamicProxy.IDynamicProxy.Target">
            <summary>
            代理目标。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.IDynamicProxy.Interceptor">
            <summary>
            拦截器。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.IDynamicProxy.Strict">
            <summary>
            类型是否精确匹配。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.IDynamicProxy.SupportedTypes">
            <summary>
            需要精确匹配的类型。
            </summary>
        </member>
        <member name="T:EAS.DynamicProxy.DynamicProxyFactory">
            <summary>
            动态代理工厂。
            </summary>
        </member>
        <member name="M:EAS.DynamicProxy.DynamicProxyFactory.CreateProxy(EAS.DynamicProxy.IInterceptor)">
            <summary>
            生成一个新的动态代理。
            </summary>
            <param name="interceptor">拦截器。</param>
            <returns>动态代理实例。</returns>
        </member>
        <member name="M:EAS.DynamicProxy.DynamicProxyFactory.CreateProxy(System.Object)">
            <summary>
            生成一个新的动态代理。
            </summary>
            <param name="target">代理的目标对象。</param>
            <returns>动态代理实例。</returns>
        </member>
        <member name="M:EAS.DynamicProxy.DynamicProxyFactory.CreateProxy(System.Object,EAS.DynamicProxy.IInterceptor)">
            <summary>
            生成一个新的动态代理。
            </summary>
            <param name="target">代理的目标对象。</param>
            <param name="interceptor">拦截器。</param>
            <returns>动态代理实例。</returns>
        </member>
        <member name="M:EAS.DynamicProxy.DynamicProxyFactory.CreateProxy(System.Object,EAS.DynamicProxy.IInterceptor,System.Boolean,System.Type[])">
            <summary>
            生成一个新的动态代理。
            </summary>
            <param name="target">代理的目标对象。</param>
            <param name="interceptor">拦截器。</param>
            <param name="strict">是否类型精确匹配。</param>
            <param name="supportedTypes">需要精确匹配的类型。</param> 
            <returns>动态代理实例。</returns>
        </member>
        <member name="P:EAS.DynamicProxy.DynamicProxyFactory.Instance">
            <summary>
            DynamicProxyFactory对象的唯一实例。
            </summary>
        </member>
        <member name="T:EAS.Context.DefaultContext">
            <summary>
            DefaultContex 的摘要说明。
            </summary>
        </member>
        <member name="F:EAS.Context.DefaultContext.container">
            <summary>
            私有内部成员，组件容器工厂，为应用上下文提供组件容器的容器对象。
            </summary>
        </member>
        <member name="M:EAS.Context.DefaultContext.#ctor">
            <summary>
            初始化 DefaultContex 对象实例。
            </summary>
        </member>
        <member name="M:EAS.Context.DefaultContext.IsSingleton(System.String)">
            <summary>
            判定指定名称的组件是生存周期是否为Singleton模式。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的生存周期是否为Singleton模式，是则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.GetLifestyleType(System.String)">
            <summary>
            根据组件名称获取指定组件的生命周期类型。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的生命周期类型。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.ContainsObject(System.String)">
            <summary>
            上下文中是否包含指定名称的组件实例。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>是否包含特定的组件。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.ContainsObject(System.Type)">
            <summary>
            上下文中是否包含指定类型的组件实例。
            </summary>
            <param name="type">组件接口类型。</param>
            <returns>是否包含特定的组件。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.GetObject(System.String)">
            <summary>
            根据组件的名称返回一个组件实例。
            </summary>
            <param name="name">组件的名称。</param>
            <returns>组件的实例。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.GetObject(System.Type)">
            <summary>
            根据组件的类型返回一个组件实例。
            </summary>
            <param name="type">组件的类型。</param>
            <returns>组件的实例。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.GetType(System.String)">
            <summary>
            根据组件的名称返回组件实例的类型。
            </summary>
            <param name="name">组件名称。</param>
            <returns>组件类型。</returns>
        </member>
        <member name="M:EAS.Context.DefaultContext.ConfigureObject(System.Object)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="target">要配置的组件目标对象。</param>
        </member>
        <member name="M:EAS.Context.DefaultContext.EAS#Context#IContext#ConfigureObject(System.Object,System.String)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="target">要配置的组件目标对象。</param>
            <param name="name">组件名称。</param>
        </member>
        <member name="M:EAS.Context.DefaultContext.ConfigureObject(System.Type)">
            <summary>
            在容器中配置组件。
            </summary>
            <param name="type">组件类型。</param>
        </member>
        <member name="M:EAS.Context.DefaultContext.ConfigureObject(System.Type,System.String)">
            <summary>
            在容器中配置组件。
            </summary>		
            <param name="type">组件名称</param>
            <param name="name">组件名称。</param>
        </member>
        <member name="P:EAS.Context.DefaultContext.Container">
            <summary>
            组件容器，获取系统上下文中的组件容器。
            </summary>
        </member>
        <member name="P:EAS.Context.DefaultContext.Item(System.String)">
            <summary>
            索引器，根据名称获取指定的组件实例。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.SocketServiceInfo">
            <summary>
            Socket服务配置信息。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.SocketServiceInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="P:EAS.Services.Locators.SocketServiceInfo.Component">
            <summary>
            服务组件名称。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.SocketServiceInfo.Url">
            <summary>
            服务url。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.ServiceConfig">
            <summary>
            系统配置读取类。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceConfig.instance">
            <summary>
            单实例。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceConfig._lock">
            <summary>
            对象锁。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.#ctor">
            <summary>
            初始化 ServiceConfig 类实例。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceConfig.m_ServiceTypes">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="F:EAS.Services.Locators.ServiceConfig.m_Services">
            <summary>
            服务。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.Initialize(System.Xml.XmlNode)">
            <summary>
            根据系统配置根节点初始系统配置。
            </summary>
            <param name="rootNode">根节点。</param>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.GetServiceType(System.String)">
            <summary>
            取得服务类型配置信息。
            </summary>
            <param name="serviceType">服务类型。</param>
            <returns>服务类型配置。</returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.GetServiceType2(System.String)">
            <summary>
            取得服务类型信息。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务配置信息。</returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceConfig.GetServiceInfo(System.String)">
            <summary>
            取得服务配置信息。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务配置信息。</returns>
        </member>
        <member name="P:EAS.Services.Locators.ServiceConfig.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="T:EAS.Security.Cryptography.Rijndael">
            <summary>
            对称加密算法。
            </summary>
            <remarks>为提供对称加密算法，提供字符串、字节数据加解密功能，扩展在(Rijndael)之上。</remarks>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.#ctor">
            <summary>
            初始化Cryptor类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Decrypt(System.Byte[])">
            <summary>
            使用当前设置的密钥和初始化向量解密指定的字节数组。
            </summary>
            <param name="bytes">要解密的字节数组。</param>
            <returns>返回解密后的字节数组。如果bytes为空引用，则返回空引用；在其他情况下，返回的字节数组的长度和要解密的字节数组的长度相同。</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Decrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            使用当前设置的密钥和初始化向量解密指定的字节流。
            <remarks>当前方法不负责关闭inStream和outStream流。</remarks>
            </summary>
            <param name="inStream">要解密的字节流。</param>
            <param name="outStream">解密后的字节流。该参数用于接收解密后的字节流数据。</param>
            <exception cref="T:System.ArgumentNullException">inStream 或者 outStream 为空引用。</exception>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Decrypt(System.String,System.String)">
            <summary>
            使用当前设置的密钥和初始化向量解密指定的文件。
            </summary>
            <param name="inName">要解密的文件名称。</param>
            <param name="outName">解密后的文件名称。如果指定的文件不存在，则自动创建该文件。</param>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Decrypt(System.String)">
            <summary>
            使用当前设置的密钥和初始化向量解密指定的字符串。
            </summary>
            <param name="s">要解密的字符串。</param>
            <returns>返回解密后的字符串。</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Encrypt(System.Byte[])">
            <summary>
            使用当前设置的密钥和初始化向量加密指定的字节数组。
            </summary>
            <param name="bytes">要加密的字节数组。</param>
            <returns>返回加密后的字节数组。如果bytes为空引用，则返回空引用；在其他情况下，返回的字节数组的长度和要加密的字节数组的长度相同。</returns>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Encrypt(System.IO.Stream,System.IO.Stream)">
            <summary>
            使用当前设置的密钥和初始化向量加密指定的字节流。
            <remarks>当前方法不负责关闭inStream和outStream流。</remarks>
            </summary>
            <param name="inStream">要加密的字节流。</param>
            <param name="outStream">加密后的字节流。该参数用于接收加密后的字节流数据。</param>
            <exception cref="T:System.ArgumentNullException">inStream 或者 outStream 为空引用。</exception>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Encrypt(System.String,System.String)">
            <summary>
            使用当前设置的密钥和初始化向量加密指定的文件。
            </summary>
            <param name="inName">要加密的文件名称。</param>
            <param name="outName">加密后的文件名称。如果指定的文件不存在，则自动创建该文件。</param>
        </member>
        <member name="M:EAS.Security.Cryptography.Rijndael.Encrypt(System.String)">
            <summary>
            使用当前设置的密钥和初始化向量加密指定的字符串。
            </summary>
            <param name="s">要加密的字符串。</param>
            <returns>返回已经加密的字符串。</returns>
        </member>
        <member name="P:EAS.Security.Cryptography.Rijndael.StringKey">
            <summary>
            设置加密的字符串密码。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.Rijndael.StringIV">
            <summary>
            设置加密的字符串初始化向量。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.Rijndael.Key">
            <summary>
            获取或者设置Cryptor的加密或者解密密钥。不能将密钥设置为空引用。
            密钥的长度为32个字节。
            </summary>
        </member>
        <member name="P:EAS.Security.Cryptography.Rijndael.IV">
            <summary>
            获取或者设置Cryptor的初始化向量。如果将该属性设置为空引用，则自动创建随机的初始化向量。
            初始化向量的长度为32个字节。
            </summary>
        </member>
        <member name="T:EAS.Objects.Exception">
            <summary>
            表示异常的基类。
            </summary>
        </member>
        <member name="M:EAS.Objects.Exception.#ctor">
            <summary>
            初始化 DataException 类的新实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Exception.#ctor(System.String)">
            <summary>
            使用异常信息初始化 DataException 类的新实例。
            </summary>
            <param name="message">异常信息。</param>
        </member>
        <member name="M:EAS.Objects.Exception.#ctor(System.String,System.Exception)">
            <summary>
            使用异常信息和内部异常对象引用初始化 DataException 类的新实例。
            </summary>
            <param name="message">异常信息。</param>
            <param name="innerException">引发当前异常的内部异常对象引用。</param>
        </member>
        <member name="T:EAS.Platform">
            <summary>
            AgileEAS.NET中间件/平台中的插件平台(IPlatform的抽像实现)。
            </summary>
        </member>
        <member name="M:EAS.Platform.#ctor">
            <summary>
            初始化Platform对象实例。
            </summary>
        </member>
        <member name="M:EAS.Platform.SetInstance(EAS.IPlatform)">
            <summary>
            设置AgileEAS.NET平台实例。
            </summary>
            <param name="instance">平台实例对象。</param>
        </member>
        <member name="M:EAS.Platform.GetLoadedAddIns">
            <summary>
            获取已加载的所有插件。
            </summary>
            <returns>已加载的插件清单。</returns>
        </member>
        <member name="M:EAS.Platform.StartModule(System.Object)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.Platform.StartModule(System.Type)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块类型。</param>
        </member>
        <member name="M:EAS.Platform.StartModule(System.Guid)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块Guid。</param>
        </member>
        <member name="M:EAS.Platform.Demand(System.Guid)">
            <summary>
            验证权限，验证当前系统登录人员是否具有某个构件的访问权限。
            </summary>
            <param name="component">构件Guid。</param>
            <returns>验证通过返回True，否则返回False。</returns>
        </member>
        <member name="M:EAS.Platform.Demand(System.Guid,EAS.Security.Privileges)">
            <summary>
            验证权限，验证当前系统登录人员是否具有某个构件的访问权限。
            </summary>
            <param name="component">构件Guid。</param>
            <param name="privileges">权限值。</param>
            <returns>验证通过返回True，否则返回False。</returns>
        </member>
        <member name="M:EAS.Platform.OpenModule(System.Object)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.Platform.OpenModule(System.Type)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块类型。</param>
        </member>
        <member name="M:EAS.Platform.OpenModule(System.Guid)">
            <summary>
            运行模块。
            </summary>
            <param name="addIn">模块Guid。</param>
        </member>
        <member name="M:EAS.Platform.CloseModule(System.Object)">
            <summary>
            关闭模块。
            </summary>
            <param name="addIn">模块插件。</param>
        </member>
        <member name="M:EAS.Platform.CloseModule">
            <summary>
            关闭当前模块。
            </summary>
        </member>
        <member name="M:EAS.Platform.CallScript(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行脚本。
            </summary>
            <param name="script">脚本代码。</param>
            <param name="args">调用参数。</param>
            <remarks>
            动态向用户提供平台的调用。
            </remarks>
        </member>
        <member name="M:EAS.Platform.OnStarted(System.EventArgs)">
            <summary>
            引发 Started 事件。
            </summary>
            <param name="e">一个 System.EventArgs，其中包含事件数据。</param>
        </member>
        <member name="M:EAS.Platform.OnNotify(EAS.NotifyEventArgs)">
            <summary>
            引发 Notify 事件。
            </summary>
            <param name="e">一个 EAS.NotifyEventArgs，其中包含事件数据。</param>
        </member>
        <member name="M:EAS.Platform.OnAddLoad(EAS.AddInEventArgs)">
            <summary>
            引发 AddLoad 事件。
            </summary>
            <param name="e">一个 EAS.AddInEventArgs，其中包含事件数据。</param>
        </member>
        <member name="M:EAS.Platform.OnAddInClosing(EAS.AddInEventArgs)">
            <summary>
            引发 AddInClosing 事件。
            </summary>
            <param name="e">一个 EAS.AddInEventArgs，其中包含事件数据。</param>
        </member>
        <member name="P:EAS.Platform.Instance">
             <summary>
            插件平台的唯一实例。
             </summary>
        </member>
        <member name="P:EAS.Platform.Name">
            <summary>
            获取应用程序名称。
            </summary>
        </member>
        <member name="P:EAS.Platform.Time">
            <summary>
            系统当前时间。
            </summary>
        </member>
        <member name="P:EAS.Platform.Context">
            <summary>
            获取对象上下文环境。
            </summary>
        </member>
        <member name="P:EAS.Platform.Container">
            <summary>
            获取组件容器。
            </summary>
        </member>
        <member name="P:EAS.Platform.Session">
            <summary>
            获取容器的当前会话。
            </summary>
        </member>
        <member name="P:EAS.Platform.WorkflowRuntime">
            <summary>
            获取工作流运行时环境。
            </summary>
        </member>
        <member name="E:EAS.Platform.Started">
            <summary>
            当平台启动完成后发生。
            </summary>
        </member>
        <member name="E:EAS.Platform.Notify">
            <summary>
            当平台发出通知时发生。
            </summary>
        </member>
        <member name="E:EAS.Platform.AddInClosing">
            <summary>
            平台关闭模块时触发。
            </summary>
        </member>
        <member name="E:EAS.Platform.AddLoad">
            <summary>
            平台成功加载模块之后触发。
            </summary>
        </member>
        <member name="T:EAS.Services.LogType">
            <summary>
            日志类型。
            </summary>
        </member>
        <member name="F:EAS.Services.LogType.Info">
            <summary>
            提示。
            </summary>
        </member>
        <member name="F:EAS.Services.LogType.Warn">
            <summary>
            警告。
            </summary>
        </member>
        <member name="F:EAS.Services.LogType.Debug">
            <summary>
            调试。
            </summary>
        </member>
        <member name="F:EAS.Services.LogType.Error">
            <summary>
            错误。
            </summary>
        </member>
        <member name="F:EAS.Services.LogType.Fatal">
            <summary>
            致命。
            </summary>
        </member>
        <member name="T:EAS.Sockets.SocketServer">
            <summary>
            Tcp服务器。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ISocketServer">
            <summary>
            Socket服务器接口。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketServer.StartServer">
            <summary>
            开始Tcp服务器。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketServer.StopServer">
            <summary>
            停止Tcp服务器。
            </summary>
        </member>
        <member name="M:EAS.Sockets.ISocketServer.AbandonSession(System.Guid)">
            <summary>
            关闭指定客户的连接。
            </summary>
            <param name="client">客户Guid。</param>
        </member>
        <member name="P:EAS.Sockets.ISocketServer.ClientCount">
            <summary>
            客户端连接数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketServer.ServerState">
            <summary>
            服务器状态。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketServer.ServerError">
            <summary>
            服务器发生错误时触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketServer.ServerStarted">
            <summary>
            服务器启动后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketServer.ServerStopped">
            <summary>
            服务器停止后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketServer.SessionStarted">
            <summary>
            注册了一个新会话后发生。
            </summary>
        </member>
        <member name="E:EAS.Sockets.ISocketServer.SessionAbandoned">
            <summary>
            某一个会话结束后发生。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ISocketServer.Logger">
            <summary>
            日志记录。
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.listenSocket">
            <summary>
            服务器端Socket
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.m_Mutex">
            <summary>
            用于服务器执行的互斥同步对象
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.numConnections">
            <summary>
            当前连接数
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.numConcurrence">
            <summary>
            最大并发量，默认6
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.m_SessionPool">
            <summary>
            Socket连接池
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.m_AcceptedClients">
            <summary>
            并发控制信号量
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.m_HanderManager">
            <summary>
            消息处理器管理器。
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.state">
            <summary>
            服务器状态。
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.m_Guid">
            <summary>
            服务器Guid。
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.ipAddress">
            <summary>
            服务器IP地址。
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.port">
            <summary>
            服务器端口号。
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.logger">
            <summary>
            日志记录。
            </summary>
        </member>
        <member name="F:EAS.Sockets.SocketServer.m_SendWorker">
            <summary>
            发送工作者。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.#ctor">
            <summary>
            初始化TcpServer对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.#ctor(System.Int32)">
            <summary>
            初始化服务器端。
            </summary>
            <param name="numConcurrence">并发的连接数量(1000以上)。</param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化服务器端。
            </summary>
            <param name="numConcurrence">并发的连接数量(1000以上)</param>
            <param name="receiveBufferSize">每一个收发缓冲区的大小(1024*1)</param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.AddHander``1(EAS.Sockets.Messages.IMessageHandler{``0})">
            <summary>
            注册消息处理器。
            </summary>
            <typeparam name="T">消息类型。</typeparam>
            <param name="hander">消息处理器。</param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.Initialize">
            <summary>
            服务端初始化
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.StartServer">
            <summary>
            启动服务器。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.StopServer">
            <summary>
            停止服务器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.SocketServer.AbandonSession(System.Guid)">
            <summary>
            终止客户端会话。
            </summary>
            <param name="clientID">会话ID。</param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.AbandonSession(EAS.Sockets.NetSession)">
            <summary>
            供NetSession调用的方法。
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.Send(System.Guid,EAS.Sockets.Messages.IMessage)">
            <summary>
            向指定客户端发送消息。
            </summary>
            <param name="clientID">客户端ID。</param>
            <param name="message">消息。</param>
        </member>
        <member name="M:EAS.Sockets.SocketServer.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EAS.Sockets.SocketServer.WriteError(System.Exception)">
            <summary>
            写异常信息。
            </summary>
            <param name="exc"></param>
        </member>
        <member name="P:EAS.Sockets.SocketServer.NumConnections">
            <summary>
            获取当前的并发数
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.MaxConcurrence">
            <summary>
            最大并发数
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.ClientCount">
            <summary>
            总练接数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.ServerState">
            <summary>
            服务器状态。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.Sessions">
            <summary>
            会话记录。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.KeepAliveValue">
            <summary>
            心跳时间，秒。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.Logger">
            <summary>
            日志记录器。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.ServerError">
            <summary>
            发生错误时触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.ServerStarted">
            <summary>
            服务器启动之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.ServerStopped">
            <summary>
            服务器停止之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.SessionStarted">
            <summary>
            会话开始后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.SessionAbandoned">
            <summary>
            会话结束后前触发。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.Guid">
            <summary>
            通信引擎的全局唯一标识符号。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.MessageMaxSize">
            <summary>
            消息最大值。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.IPEndPoint">
            <summary>
            IP终结点。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.IPAddress">
            <summary>
            IP地址。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.Port">
            <summary>
            端口号。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.PacketSend">
            <summary>
            报文发送完成。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.PacketReceived">
            <summary>
            报文接收完成。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.MessageSend">
            <summary>
            消息发送完成之后触发。
            </summary>
        </member>
        <member name="E:EAS.Sockets.SocketServer.MessagerReceived">
            <summary>
            消息接收完成之后触发。
            </summary>
        </member>
        <member name="P:EAS.Sockets.SocketServer.Tag">
            <summary>
            获取或设置包含有关SocketServer的数据的对象。
            </summary>
        </member>
        <member name="T:EAS.DynamicProxy.DefaultDynamicProxy">
            <summary>
            一个动态代理的实现。
            </summary>
            <remarks>
            基于remoting/RealProxy实现的一个动态代理，可以指向一个真实的对象，也可以指向一个虚对象。
            </remarks>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.#ctor(EAS.DynamicProxy.IInterceptor)">
            <summary>
            初始化DefaultDynamicProxy对象实例。
            </summary>
            <param name="interceptor">拦截器。</param>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.#ctor(System.Object)">
            <summary>
            初始化DefaultDynamicProxy对象实例。
            </summary>
            <param name="target">目标对象。</param>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.#ctor(System.Object,EAS.DynamicProxy.IInterceptor)">
            <summary>
            初始化DefaultDynamicProxy对象实例。
            </summary>
            <param name="target">目标对象。</param>
            <param name="interceptor">拦截器。</param>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.#ctor(System.Object,EAS.DynamicProxy.IInterceptor,System.Boolean,System.Type[])">
            <summary>
            初始化DefaultDynamicProxy对象实例。
            </summary>
            <param name="target">目标对象。</param>
            <param name="interceptor">拦截器。</param>
            <param name="strict">是否类型精确匹配。</param>
            <param name="supportedTypes">需要精确匹配的类型。</param>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.CreateObjRef(System.Type)">
            <summary>
            为指定的对象类型创建 System.Runtime.Remoting.ObjRef，并将其作为客户端激活的对象注册到远程处理结构。
            </summary>
            <param name="requestedType">为其创建 System.Runtime.Remoting.ObjRef 的对象类型。</param>
            <returns>null。</returns>
            <exception cref="T:System.NotSupportedException">动态代理没有实现ObjRef方法。</exception>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            进行方法调用。
            </summary>
            <param name="msg">方法调用信息。</param>
            <returns>调用的方法所返回的消息，包含返回值和所有 out 或 ref 参数。</returns>
        </member>
        <member name="M:EAS.DynamicProxy.DefaultDynamicProxy.CanCastTo(System.Type,System.Object)">
            <summary>
            检查是否可以将表示指定对象类型的代理强制转换为由 System.Runtime.Remoting.IRemotingTypeInfo 接口表示的类型。
            </summary>
            <param name="fromType">要强制转换到的类型。</param>
            <param name="obj">要为其检查强制转换的对象。</param>
            <returns>如果强制转换将成功，则为 true；否则为 false。</returns>
        </member>
        <member name="P:EAS.DynamicProxy.DefaultDynamicProxy.Target">
            <summary>
            代理目标。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.DefaultDynamicProxy.Interceptor">
            <summary>
            拦截器。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.DefaultDynamicProxy.Strict">
            <summary>
            类型是否精确匹配。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.DefaultDynamicProxy.SupportedTypes">
            <summary>
            需要精确匹配的类型。
            </summary>
        </member>
        <member name="P:EAS.DynamicProxy.DefaultDynamicProxy.TypeName">
            <summary>
            获取或设置 System.Runtime.Remoting.ObjRef 中的服务器对象的完全限定类型名。
            </summary>
            <exception cref="T:System.NotSupportedException">动态代理没有实现TypeName属性。</exception>
        </member>
        <member name="T:EAS.Sessions.ISession">
            <summary>
            平台会话，用于定义一个客户/登录/终端与平台的一次/段交互。
            </summary>
        </member>
        <member name="M:EAS.Sessions.ISession.Start(System.Object[])">
            <summary>
            开始 Client 和 Server 之间的会话。
            </summary>
            <param name="parameters">会话参数。</param>
        </member>
        <member name="M:EAS.Sessions.ISession.Abandon">
            <summary>
            中止 Client 和 Server 之间的会话。
            </summary>
        </member>
        <member name="P:EAS.Sessions.ISession.ID">
            <summary>
            会话GuID。
            </summary>
        </member>
        <member name="P:EAS.Sessions.ISession.DataSet">
            <summary>
            会话帐套。
            </summary>
        </member>
        <member name="P:EAS.Sessions.ISession.Organization">
            <summary>
            组织机构。
            </summary>
        </member>
        <member name="P:EAS.Sessions.ISession.Client">
            <summary>
            获取当前会话中的 IClient。
            </summary>
        </member>
        <member name="M:EAS.Services.ServiceSessionManager.Start(System.Guid)">
            <summary>
            启动一个新的服务会话。
            </summary>
            <param name="sessionID">会话唯一标识号。</param>
        </member>
        <member name="M:EAS.Services.ServiceSessionManager.Start(System.Guid,System.Object)">
            <summary>
            启动一个新的服务会话。
            </summary>
            <param name="sessionID">会话唯一标识号。</param>
            <param name="dataTag">数据标记。</param>
        </member>
        <member name="M:EAS.Services.ServiceSessionManager.Abandon(System.Guid)">
            <summary>
            终止指定的服务会话。
            </summary>
            <param name="sessionID">会话唯一标识号。</param>
        </member>
        <member name="M:EAS.Services.ServiceSessionManager.UpdateDataTag(System.Guid,System.Object)">
            <summary>
            更新会话数据标记。
            </summary>
            <param name="sessionID">会话唯一标识号。</param>
            <param name="dataTag">数据标记。</param>
        </member>
        <member name="M:EAS.Services.ServiceSessionManager.GetDataTag(System.Guid)">
            <summary>
            根据会话ID取会话标记。
            </summary>
            <param name="sessionID">会话ID。</param>
            <returns></returns>
        </member>
        <member name="P:EAS.Services.ServiceSessionManager.Instance">
            <summary>
            ServiceManager对象的唯一实例。
            </summary>
        </member>
        <member name="P:EAS.Services.ServiceSessionManager.SessionCount">
            <summary>
            服务会话统计。
            </summary>
        </member>
        <member name="T:EAS.Services.ServiceProxyInterceptor">
            <summary>
            服务代理拦截器。
            </summary>
        </member>
        <member name="T:EAS.DynamicProxy.IInterceptor">
            <summary>
            动态代理拦截器接口。
            </summary>
        </member>
        <member name="M:EAS.DynamicProxy.IInterceptor.Intercept(EAS.DynamicProxy.IInvocation,System.Object[])">
            <summary>
            拦截方法的执行。
            </summary>
            <param name="invocation">调用信息。</param>
            <param name="args">方法参数。</param>
            <returns>返回结果。</returns>
        </member>
        <member name="P:EAS.Services.ServiceProxyInterceptor.ServiceType">
            <summary>
            服务类型。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.ServiceType">
            <summary>
            服务类型定义。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceType.#ctor">
            <summary>
            初始化服务类型。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.ServiceType.GetServiceLocator">
            <summary>
            取得服务类型的定位器实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EAS.Services.Locators.ServiceType.GetServiceInfo">
            <summary>
            取得服务类型的服务配置信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.Services.Locators.ServiceType.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.ServiceType.Component">
            <summary>
            定位器组件。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.ServiceType.Locator">
            <summary>
            定位器。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.ServiceType.Config">
            <summary>
            服务类型配置组件。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.DefaultPoolFactory">
            <summary>
            系统默认的对象池工厂。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPoolFactory.#ctor">
            <summary>
            初始化 DefaultPoolFactory　类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPoolFactory.Create(System.Int32,System.Int32,EAS.Objects.IComponentAdapter)">
            <summary>
             创建一个对象池接口组件实例。
            </summary>
            <param name="initialsize">对象池的初始大小，即初始对象池在初始化时的容量。</param>
            <param name="maxSize">对象池的最大对象容量。</param>
            <param name="adapter">组件适配器对象。</param>
            <returns>对象池接口组件实例。</returns>
        </member>
        <member name="M:EAS.Objects.Lifecycle.Pool.DefaultPoolFactory.Create(System.Int32,System.Int32,EAS.Objects.Lifecycle.Pool.PoolMode,EAS.Objects.IComponentAdapter)">
            <summary>
            创建一个对象池接口组件实例。
            </summary>
            <param name="initialsize">对象池的初始大小，即初始对象池在初始化时的容量。</param>
            <param name="maxSize">对象池的最大对象容量。</param>
            <param name="mode">对像池的模式。</param>
            <param name="adapter">组件适配器对象。</param>
            <returns>对象池接口组件实例。</returns>
        </member>
        <member name="T:EAS.Objects.Injection.PropertyInjector">
            <summary>
            属性注入器，完成对象属性注入。
            </summary>
            <remarks> 
            构造注入完成Objects Type 3 设值子注入，两个对象实现之间的依赖于属性的设值。 '
            </remarks>
        </member>
        <member name="M:EAS.Objects.Injection.PropertyInjector.#ctor">
            <summary>
            初始化 PropertyInjector 类实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.PropertyInjector.#ctor(System.Object)">
            <summary>
            使用接受注入对象实例创建 PropertyInjector 类实例。
            </summary>
            <param name="parentInstance">注入对象实例。</param>
        </member>
        <member name="M:EAS.Objects.Injection.PropertyInjector.Inject">
            <summary>
            完成对象的注入。
            </summary>
        </member>
        <member name="P:EAS.Objects.Injection.PropertyInjector.InjectionType">
            <summary>
            获取一个值，该值指标实现类使用何种注入机制。
            </summary>
        </member>
        <member name="M:EAS.Objects.Injection.PropertyInjector.TypeHelper.GetObjectType(System.Type,System.String)">
            <summary>
            获取包含方法的类型。
            </summary>
            <param name="type">实体对象类型。</param>
            <param name="propertyName">属性名称。</param>
            <returns>实体类型。</returns>
        </member>
        <member name="T:EAS.Objects.IAssemblyLoader">
            <summary>
            IOC容器程序集装载器接口。
            </summary>
            <remarks>
            本接口用于IOC容器的初始化程序集装载，以及发生类型未加载时的处理机制。
            </remarks>
        </member>
        <member name="M:EAS.Objects.IAssemblyLoader.Initialize">
            <summary>
            初始化容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.IAssemblyLoader.Container">
            <summary>
            目标组件容器。
            </summary>
        </member>
        <member name="T:EAS.Objects.ContainerBuilder">
            <summary>
            构件容器构造器，用于完成构件容器的构造功能。
            </summary>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.Builder">
            <summary>
            从系统配置文件自动构造容器实例。
            </summary>		
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.GetDefaultContainer">
            <summary>
            获取系统上下文环境默认的构件容器实例。
            </summary>		
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.BuilderDefault">
            <summary>
            从系统配置文件自动构造容器实例。
            </summary>		
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.BuilderDefault(System.String)">
            <summary>
            从系统配置文件自动构造容器实例。
            </summary>
            <param name="name"> 名称。</param>
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.BuilderEmpty">
            <summary>
            构造构件容器实例（空容器、不包括任何实例）。
            </summary>		
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.Builder(EAS.Objects.IAssemblyLoader)">
            <summary>
            根据程序集装载器构造构件容器。
            </summary>		
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.Builder(System.String)">
            <summary>
            使用xml配置构造构件容器实例。
            </summary>
            <param name="m_Url">配置信息url。</param>
            <returns>构件容器实例。</returns>
        </member>
        <member name="M:EAS.Objects.ContainerBuilder.Builder(System.Xml.XmlNode)">
            <summary>
            使用xml配置构造构件容器实例。
            </summary>
            <param name="m_Node">XML节点。</param>
            <returns>构件容器实例。</returns>
        </member>
        <member name="T:EAS.Objects.ClassProvider">
            <summary>
            类/对象提供者，为对象实例化提供的辅助类。
            </summary>
        </member>
        <member name="F:EAS.Objects.ClassProvider.instance">
            <summary>
            内部私有成员，ClassProvider对象的唯一实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.ClassProvider.#ctor">
            <summary>
            初始化 ClassProvider 对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.ClassProvider.ContainsAssembly(System.String)">
            <summary>
            程序集是否已经装入应用程序区域。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <returns>是否包指定的程序集。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetAssembly(System.String)">
            <summary>
            取得指定名称的程序集。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <returns>如果执行成功，返回指定的程序集实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetType(System.String)">
            <summary>
            获取指定的类型。
            </summary>
            <param name="typeName">类型信息。</param>
            <returns>如果执行成功，返回指定的程序集实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetType(System.String,System.String)">
            <summary>
            获取指定的类型。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="type">类型。</param>
            <returns>如果执行成功，返回指定的程序集实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetObjectInstance(System.String,System.String)">
            <summary>
            取得对象实例。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="type">对象类型。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetObjectInstance(System.Type)">
            <summary>
            取得对象实例。
            </summary>
            <param name="type">对象类型。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetObjectInstance``1">
            <summary>
            取得对象实例。
            </summary>
            <typeparam name="T">对象类型信息。</typeparam>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetObjectInstance(System.Type,System.Object[])">
            <summary>
            取得对象实例。
            </summary>
            <param name="type">对象类型。</param>
            <param name="args">对象构造参数。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.InternalGetType(System.String,System.String)">
            <summary>
            获取指定的类型。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="type">类型。</param>
            <returns>如果执行成功，返回指定的程序集实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.InternalContainsAssembly(System.String)">
            <summary>
            程序集是否已经装入应用程序区域。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <returns>是否包指定的程序集。包含则返回true，否则返回false。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.InternalGetAssembly(System.String)">
            <summary>
            取得指定名称的程序集。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <returns>如果执行成功，返回指定的程序集实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.CreateInstance(System.String,System.String)">
            <summary>
            取得对象实例。
            </summary>
            <param name="assemblyName">程序集名称。</param>
            <param name="type">对象类型。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.CreateInstance(System.Type)">
            <summary>
            取得对象实例。
            </summary>
            <param name="type">对象类型。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.CreateInstance(System.Type,System.Object[])">
            <summary>
            取得对象实例。
            </summary>
            <param name="type">对象类型。</param>
            <param name="args">对象构造参数。</param>
            <returns>如果执行成功，返回生成的对象实例，否则返回null(Nothing)。</returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetAssemblyName(System.String)">
            <summary>
            取得程序集名称。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Objects.ClassProvider.GetAssemblyExtName(System.String)">
            <summary>
            取得程序集扩展名。
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Objects.ClassProvider.Instance">
            <summary>
            ClassProvider对象的唯一实例。
            </summary>
        </member>
        <member name="T:EAS.Modularization.IModule">
            <summary>
            定义EAS.NET模块插件的基本规范。
            </summary>
            <remarks>
            定义一个模块的接口规范，基于EAS的所有应用程序模块应该遵守IModle接口的约定。
            </remarks>
        </member>
        <member name="T:EAS.IAddIn">
            <summary>
            插件接口定义。
            </summary>
            <remarks>
            AgileEAS.NET平台是一个插件平台，IAddIn即为平台中的插件，运行在插件容器之中。
            </remarks>
        </member>
        <member name="M:EAS.IAddIn.Close">
            <summary>
            关闭当前插件。
            </summary>
        </member>
        <member name="M:EAS.IAddIn.Start(System.Object[])">
            <summary>
            运行当前插件。
            </summary>
            <param name="parameters">插件运行的初始参数列表。</param>
        </member>
        <member name="P:EAS.IAddIn.Guid">
            <summary>
            获取插件的全局唯一标识符 (GUID)。
            </summary>
            <remarks>该值由实现类得到，默认值实现类的GUID值。</remarks>
        </member>
        <member name="P:EAS.IAddIn.Name">
            <summary>
            获取插件的名称。
            </summary>
            <remarks>该值由开发者自己生成。</remarks>
        </member>
        <member name="P:EAS.IAddIn.Description">
            <summary>
            获取插件的介绍。
            </summary>
            <remarks>插件的介绍与说明信息，由开发人员定义，也可以在安装后定义。</remarks>
        </member>
        <member name="P:EAS.IAddIn.Version">
            <summary>
            获取插件的版本信息。
            </summary>
            <remarks>插件的版本信息，默认从程序集中读取，也可由开发者自己生成。</remarks>
        </member>
        <member name="P:EAS.IAddIn.Developer">
            <summary>
            获取插件的开发者信息。
            </summary>
            <remarks>插件的开发者信息，默认从程序集中读取，也可由开发者自己生成。</remarks>
        </member>
        <member name="P:EAS.IAddIn.Group">
            <summary>
            获取插件的分组信息。
            </summary>
            <remarks>插件的分组，由开发人员定义，也可以在安装后定义。</remarks>
        </member>
        <member name="T:EAS.Sockets.ServerErrorEventHandler">
            <summary>
            服务器发生错误时事件的委托。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ServerErrorEventArgs">
            <summary>
            服务器发生错误时事件的参数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ServerErrorEventArgs.StopServer">
            <summary>
            获取或者设置一个值，该值指示是否要终止服务器。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ServerErrorEventArgs.AbandonSession">
            <summary>
            获取或者设置一个值，该值指示是否要终止当前出错的会话。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ServerErrorEventArgs.Exception">
            <summary>
            获取已经发生的错误异常对象。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ServerErrorEventArgs.Source">
            <summary>
            获取错误的类型。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ServerErrorEventArgs.Session">
            <summary>
            获取发生错误的会话。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ServerErrorEventArgs.State">
            <summary>
            获取或者设置错误发生时的状态对象。随着错误类型的不同而不同。可以用于反馈错误处理代码提供的信息。
            </summary>
        </member>
        <member name="T:EAS.Sockets.MessageHandler">
            <summary>
            消息传输委托。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">消息传输参数。</param>
        </member>
        <member name="T:EAS.Sockets.MessageEventArgs">
            <summary>
            消息传输参数。
            </summary>
        </member>
        <member name="M:EAS.Sockets.MessageEventArgs.#ctor">
            <summary>
            初始化MessageTransferEventArgs对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.MessageEventArgs.#ctor(System.Guid,EAS.Sockets.Messages.IMessage)">
            <summary>
            初始化MessageTransferEventArgs对象实例。
            </summary>
            <param name="client">消息链。</param>
            <param name="message">业务消息。</param>
        </member>
        <member name="P:EAS.Sockets.MessageEventArgs.Client">
            <summary>
            客户Guid。
            </summary>
        </member>
        <member name="P:EAS.Sockets.MessageEventArgs.Message">
            <summary>
            消息链。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.ErrorMessage">
            <summary>
            错误消息。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.ErrorMessage.#ctor">
            <summary>
            初始化ErrorMessage对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.ErrorMessage.Load(EAS.Sockets.Messages.MessageReader)">
            <summary>
            从指定的 MessageReader加载消息对象。
            </summary>
            <param name="reader">消息读取器。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.ErrorMessage.WriteTo(EAS.Sockets.Messages.MessageWriter)">
            <summary>
            将消息对象保存到指定的MessageWriter。
            </summary>
            <param name="writer">消息编写器。</param>
        </member>
        <member name="P:EAS.Sockets.Messages.ErrorMessage.Error">
            <summary>
            错误信息。
            </summary>
        </member>
        <member name="M:EAS.ExceptionHandler.Handle(System.Exception)">
            <summary>
            处理错误异常。
            </summary>
            <param name="exc"></param>
            <returns></returns>
        </member>
        <member name="T:EAS.Sockets.NetSessionPool">
            <summary>
            客户段连接缓存池。
            </summary>
        </member>
        <member name="M:EAS.Sockets.NetSessionPool.Pop(System.Guid)">
            <summary>
            获取一个SocketAsyncEventArgs对象。
            </summary>
            <param name="clientID"></param>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.NetSessionPool.Push(EAS.Sockets.NetSession)">
            <summary>
            压入堆栈。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EAS.Sockets.NetSessionPool.FindByClientID(System.Guid)">
            <summary>
            根据用户查询SocketAsyncEventArgs。
            </summary>
            <param name="clientID"></param>
            <returns></returns>
        </member>
        <member name="P:EAS.Sockets.NetSessionPool.Count">
            <summary>
            总记录数据。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSessionPool.OnLines">
            <summary>
            在线。
            </summary>
        </member>
        <member name="P:EAS.Sockets.NetSessionPool.Sessions">
            <summary>
            
            </summary>
        </member>
        <member name="T:EAS.Aspect.AspectObject">
            <summary>
            所有需要接受Aspect管理的类的基类 
            </summary>
        </member>
        <member name="T:EAS.Application">
            <summary>
            定义AgileEAS.NET平台应用程序(IApplication的抽像实现)。
            </summary>
        </member>
        <member name="T:EAS.Modularization.IApplication">
            <summary>
            定义AgileEAS.NET平台应用程序接口。
            </summary>
            <remarks>
            应用程序即插件的运行容器或者插件的运行环境。
            </remarks>
        </member>
        <member name="T:EAS.Security.PermissionsService">
            <summary>
            权限查询服务。
            </summary>
        </member>
        <member name="M:EAS.Security.PermissionsService.Demand(System.Guid,System.String)">
            <summary>
            检查指定模块权限。
            </summary>
            <param name="module">模块Guid。</param>
            <param name="loginID">登录ID。</param>
            <returns>通过权限检查返回true，否则返回false。</returns>
        </member>
        <member name="T:EAS.Objects.NoComponentException">
            <summary>
            容器中无此组件。
            </summary>
        </member>
        <member name="M:EAS.Objects.NoComponentException.#ctor">
            <summary>
            初始化NoComponentException对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.NoComponentException.#ctor(System.String)">
            <summary>
            初始化NoComponentException实例。
            </summary>
            <param name="componentKey">组件的key</param>
        </member>
        <member name="M:EAS.Objects.NoComponentException.#ctor(System.Type)">
            <summary>
            初始化NoComponentException实例。
            </summary>
            <param name="componentType">组件的类型信息。</param>
        </member>
        <member name="M:EAS.Objects.NoComponentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 NoComponentException 类的新实例。
            </summary>
            <param name="info">SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">StreamingContext，它包含有关源或目标的上下文信息</param>
        </member>
        <member name="T:EAS.Objects.NoComponentImplException">
            <summary>
            容器中无此组件。
            </summary>
        </member>
        <member name="M:EAS.Objects.NoComponentImplException.#ctor">
            <summary>
            初始化NoComponentImplException对象实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.NoComponentImplException.#ctor(System.String)">
            <summary>
            初始化NoComponentException实例。
            </summary>
            <param name="componentKey">组件的key</param>
        </member>
        <member name="M:EAS.Objects.NoComponentImplException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 NoComponentImplException 类的新实例。
            </summary>
            <param name="info">SerializationInfo，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context">StreamingContext，它包含有关源或目标的上下文信息</param>
        </member>
        <member name="T:EAS.Objects.Lifecycle.Pool.PoolMode">
            <summary>
            枚举PoolMode，对象池管理池内对象的模式。
            </summary>
        </member>
        <member name="F:EAS.Objects.Lifecycle.Pool.PoolMode.Standard">
            <summary>
            标准模式，即用户使用时请求一个组件，完成后释放组件。
            </summary>
        </member>
        <member name="F:EAS.Objects.Lifecycle.Pool.PoolMode.Auto">
            <summary>
            自动模式，即用户使用时请求一个组件，不用去管理释放组件。
            </summary>
        </member>
        <member name="T:EAS.Objects.Lifecycle.LifestyleType">
            <summary>
            枚举 LifestyleType 组件的生存方式，即组件以何种生存周期在容器中生存。
            </summary>
        </member>
        <member name="F:EAS.Objects.Lifecycle.LifestyleType.Transient">
            <summary>
            Transient，组件在使用时创建、使用后销毁。
            </summary>
        </member>
        <member name="F:EAS.Objects.Lifecycle.LifestyleType.Singleton">
            <summary>
            Singleton，组件一旦自在，则在所有的客商端中共享。
            </summary>
        </member>
        <member name="F:EAS.Objects.Lifecycle.LifestyleType.Thread">
            <summary>
            Thread，每一个客户端线程拥有单独的一个实例。
            </summary>
        </member>
        <member name="F:EAS.Objects.Lifecycle.LifestyleType.Pooled">
            <summary>
            Pooled，组件池，初始时分配一定数量的组件，客户请求时，分配一个空闲组件，用户使用完后交由池中。
            </summary>
        </member>
        <member name="M:EAS.Serialization.Initializer.LoadDirectory(System.String)">
            <summary>
            加载指定目录。
            </summary>
            <param name="m_Directory"></param>
        </member>
        <member name="M:EAS.Serialization.Initializer.FilterAssembly">
            <summary>
            程序集筛选。
            </summary>
        </member>
        <member name="M:EAS.Serialization.Initializer.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            加载服务对象。
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="T:EAS.Objects.XmlAssemblyLoader">
            <summary>
            xml配置程序集加载器。
            </summary>
        </member>
        <member name="M:EAS.Objects.XmlAssemblyLoader.Initialize">
            <summary>
            初始化容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.XmlAssemblyLoader.Container">
            <summary>
            目标组件容器。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ServerState">
            <summary>
            表示服务器的当前状态。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ServerState.Initialing">
            <summary>
            正在初始化。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ServerState.Inited">
            <summary>
            初始化完成。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ServerState.Ready">
            <summary>
            准备就绪。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ServerState.Running">
            <summary>
            服务器正在运行。
            </summary>
        </member>
        <member name="F:EAS.Sockets.ServerState.Stoped">
            <summary>
            服务器已经停止。
            </summary>
        </member>
        <member name="T:EAS.Reflection.FastInvokeHandler">
            <summary>
            快速反射调用委托。
            </summary>
            <param name="target">目标对象。</param>
            <param name="paramters">调用参数。</param>
            <returns>方法返回值。</returns>
        </member>
        <member name="T:EAS.Reflection.FastInvoker">
            <summary>
            快速翻身调用。
            </summary>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateMethodInvoker(System.Reflection.MethodInfo)">
            <summary>
            创建方法调用快速访问委托。
            </summary>
            <param name="method">目标方法。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateMethodInvoker(System.Type,System.String)">
            <summary>
            创建方法调用快速访问委托。
            </summary>
            <param name="targetType">对象类型。</param>
            <param name="methodName">方法名称。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateGetPropertyInvoker(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建GetProperty快速访问委托。
            </summary>
            <param name="targetType">对象类型。</param>
            <param name="property">目标属性。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateGetPropertyInvoker(System.Type,System.String)">
            <summary>
            创建GetProperty快速访问委托。
            </summary>
            <param name="targetType">对象类型。</param>
            <param name="PropertyName">属性名称。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateSetPropertyInvoker(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建SetProperty快速访问委托。
            </summary>
            <param name="targetType">对象类型。</param>
            <param name="property">目标属性。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="M:EAS.Reflection.FastInvoker.CreateSetPropertyInvoker(System.Type,System.String)">
            <summary>
            创建SetProperty快速访问委托。
            </summary>
            <param name="targetType">对象类型。</param>
            <param name="PropertyName">属性名称。</param>
            <returns>快速反射调用委托。</returns>
        </member>
        <member name="T:EAS.Sockets.Messages.MessageWriter">
            <summary>
            基于字节流的消息编写器。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.#ctor">
            <summary>
            初始化MessageWriter对象实例。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Byte[])">
            <summary>
            写入字节流。
            </summary>
            <param name="value">字节流。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.InternalWrite(System.Byte[])">
            <summary>
            写入字节流。
            </summary>
            <param name="value">字节流。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.String)">
            <summary>
            写入字符串。
            </summary>
            <param name="value">字符串。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Int64)">
            <summary>
            写入64 位整数。
            </summary>
            <param name="value">64 位整数。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.UInt64)">
            <summary>
            写入64 位无符号整数。
            </summary>
            <param name="value">64 位无符号整数。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Int32)">
            <summary>
            写入32 位整数。
            </summary>
            <param name="value">32 位整数。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.UInt32)">
            <summary>
            写入32 位无符号整数。
            </summary>
            <param name="value">32 位无符号整数。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Int16)">
            <summary>
            写入16 位整数。
            </summary>
            <param name="value">16 位整数。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.UInt16)">
            <summary>
            写入16 位无符号整数。
            </summary>
            <param name="value">16 位无符号整数。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Byte)">
            <summary>
            写入字节值。
            </summary>
            <param name="value">字节值。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Char)">
            <summary>
            写入字符值。
            </summary>
            <param name="value">字符值。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Boolean)">
            <summary>
            写入布尔值。
            </summary>
            <param name="value">布尔值。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Double)">
            <summary>
            写入双精度浮点数。
            </summary>
            <param name="value">双精度浮点数。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Single)">
            <summary>
            写入单精度浮点数。
            </summary>
            <param name="value">单精度浮点数。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Decimal)">
            <summary>
            写入十进制数。
            </summary>
            <param name="value">十进制数。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.DateTime)">
            <summary>
            写入日期时间。
            </summary>
            <param name="value">日期时间。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(System.Guid)">
            <summary>
            写入Guid。
            </summary>
            <param name="value">Guid。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.WriteObject(System.Object)">
            <summary>
            写入对象。
            </summary>
            <param name="graph">对象实例。</param>
            <remarks>
            要求对象必须是可序列化的。
            </remarks>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write(EAS.Sockets.Messages.IMessage)">
            <summary>
            写入消息对象。
            </summary>
            <param name="message">消息对象。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Write``1(``0)">
            <summary>
            写入消息对象。
            </summary>
            <param name="message">消息对象。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.EnsureCapacity(System.Int32)">
            <summary>
            缓存区扩容。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.ToArray">
            <summary>
            将内容写入字节数组。
            </summary>
            <returns>字节数组。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageWriter.Dispose">
            <summary>
            释放占用的缓存区。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.MessageWriter.Length">
            <summary>
            消息流长度。
            </summary>
        </member>
        <member name="T:EAS.Sockets.Messages.MessageReader">
            <summary>
            基于字节流的消息读取器。
            </summary>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.#ctor(System.Byte[])">
            <summary>
            初始化MessageReader对象实例。
            </summary>
            <param name="buffer">字节流。</param>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.Read(System.Int32)">
            <summary>
            读字节流。
            </summary>
            <param name="length">长度。</param>
            <returns></returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadBytes">
            <summary>
            读字节流。
            </summary>
            <returns>字节流。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadBoolean">
            <summary>
            读布而值。
            </summary>
            <returns>布而值。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadByte">
            <summary>
            读8位无符号整数。
            </summary>
            <returns> 8位无符号整数。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadChar">
            <summary>
            读字符。
            </summary>
            <returns>字符。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadInt16">
            <summary>
            读16位整数。
            </summary>
            <returns>16位整数。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadUInt16">
            <summary>
            读16位无符号整数。
            </summary>
            <returns> 16位无符号整数。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadInt32">
            <summary>
            读32位整数。
            </summary>
            <returns>32位整数。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadUInt32">
            <summary>
            读32位无符号整数。
            </summary>
            <returns> 32位无符号整数。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadInt64">
            <summary>
            读64位整数。
            </summary>
            <returns>64位整数。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadUInt64">
            <summary>
            读64位无符号整数。
            </summary>
            <returns> 64位无符号整数。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadSingle">
            <summary>
            读单精度浮点数字。
            </summary>
            <returns> 单精度浮点数字。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadDouble">
            <summary>
            读双精度浮点数字。
            </summary>
            <returns> 双精度浮点数字。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadDecimal">
            <summary>
            读十进制数。
            </summary>
            <returns> 十进制数。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadDateTime">
            <summary>
            读日期时间。
            </summary>
            <returns> 日期时间。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadGuid">
            <summary>
            读Guid值。
            </summary>
            <returns> Guid值。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.ReadString">
            <summary>
            读字符串。
            </summary>
            <returns> 字符串。</returns>
        </member>
        <member name="M:EAS.Sockets.Messages.MessageReader.Dispose">
            <summary>
            释放占用的缓存区。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.MessageReader.Length">
            <summary>
            消息流长度。
            </summary>
        </member>
        <member name="P:EAS.Sockets.Messages.MessageReader.Position">
            <summary>
            当前读取便宜量。
            </summary>
        </member>
        <member name="T:EAS.Context.ContextHelper">
             <summary> 
             系统上下文文管理帮助类。 
             </summary> 
            <remarks>
             为系统上下文对象管理与业务支持。
            </remarks>
        </member>
        <member name="M:EAS.Context.ContextHelper.#ctor">
            <summary>
            初始化类对象实例。
            </summary>
        </member>
        <member name="M:EAS.Context.ContextHelper.AddContext(System.String,EAS.Context.IContext)">
            <summary>
            注册上下文对象。
            </summary>
            <param name="name">键。</param>
            <param name="context">上下文对象。</param>
        </member>
        <member name="M:EAS.Context.ContextHelper.Clear">
            <summary>
            清空上下文对象。
            </summary>
        </member>
        <member name="M:EAS.Context.ContextHelper.GetContext(System.String)">
            <summary>
            根据名获取上下文对象。
            </summary>
            <param name="name">名称。</param>
            <returns>上下文对象。</returns>
        </member>
        <member name="M:EAS.Context.ContextHelper.GetContext">
            <summary>
            获取默认的上下文对象。
            </summary>
            <returns>上下文对象。</returns>
        </member>
        <member name="T:EAS.Workflow.IWorkflowDataEntity">
            <summary>
            工作流数据实体接口定义。
            </summary>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.Eval``1(System.String)">
            <summary>
            对表达式进行计算/求值。
            </summary>
            <typeparam name="TValue">返回值类型。</typeparam>
            <param name="expression">要计算的表达式,如"1+2+3+4"。</param>
            <returns>返回计算结果,如果带有逻辑运算符则返回true/false,否则返回数。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.Eval(System.String)">
            <summary>
            对表达式进行计算/求值。
            </summary>
            <param name="expression">要计算的表达式,如"1+2+3+4"。</param>
            <returns>返回计算结果,如果带有逻辑运算符则返回true/false,否则返回数。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.SetValue(System.String,System.Object)">
            <summary>
            设置指定属性的值。
            </summary>
            <param name="name">名称名称。</param>
            <param name="value">属性值。</param>
            <returns>对表表达式或者属性值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetValue(System.String)">
            <summary>
            获取指定表达式或者属性的值。
            </summary>
            <param name="expression">表达式或者属性名称。</param>
            <returns>对表表达式或者属性值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetValue``1(System.String)">
            <summary>
            获取指定表达式或者属性的值。
            </summary>
            <typeparam name="TValue">返回值类型。</typeparam>
            <param name="expression">表达式或者属性名称。</param>
            <returns>对表表达式或者属性值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetBoolean(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetDateTime(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetGuid(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetByte(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetInt16(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetInt32(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetInt64(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetDecimal(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetDouble(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetSingle(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="M:EAS.Workflow.IWorkflowDataEntity.GetString(System.String)">
            <summary>
            计算表达式值，可以为数学表达式，也可以为单一属性值。
            </summary>
            <param name="expression">表达式。</param>
            <returns>表达式值。</returns>
        </member>
        <member name="T:EAS.Objects.StandardAssemblyLoader">
            <summary>
            标准IOC容器程序集装载器。
            </summary>
        </member>
        <member name="M:EAS.Objects.StandardAssemblyLoader.Initialize">
            <summary>
            初始化容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.StandardAssemblyLoader.Container">
            <summary>
            目标组件容器。
            </summary>
        </member>
        <member name="M:EAS.Objects.ServiceBridgerAssemblyLoader.Initialize">
            <summary>
            初始化容器。
            </summary>
        </member>
        <member name="M:EAS.Objects.ServiceBridgerAssemblyLoader.LoadDirectory(System.String)">
            <summary>
            加载指定目录。
            </summary>
            <param name="m_Directory"></param>
        </member>
        <member name="M:EAS.Objects.ServiceBridgerAssemblyLoader.FilterAssembly">
            <summary>
            程序集筛选。
            </summary>
        </member>
        <member name="M:EAS.Objects.ServiceBridgerAssemblyLoader.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            加载服务对象。
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="T:EAS.Services.Locators.SocketServiceProxyInterceptor">
            <summary>
            服务代理拦截器。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.DotNetRemotingLocator">
            <summary>
            Net Remoting 服务定位器。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.DotNetRemotingLocator.GetService(System.String)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="M:EAS.Services.Locators.DotNetRemotingLocator.GetService(System.String,System.Type)">
            <summary>
             定位指定的服务。
            </summary>
            <param name="serviceName">服务名称。</param>
            <param name="interfaceType">服务接口。</param>
            <returns>服务(代理)对象。</returns>
        </member>
        <member name="T:EAS.Security.PrivilegerType">
            <summary>
            定义权限所有者的类型。
            </summary>
        </member>
        <member name="F:EAS.Security.PrivilegerType.Account">
            <summary>
            拥有权限的是帐户。
            </summary>
        </member>
        <member name="F:EAS.Security.PrivilegerType.Role">
            <summary>
            拥有权限的是角色。
            </summary>
        </member>
        <member name="T:EAS.Objects.PropertyInfo">
            <summary>
            对象属性定义。
            </summary>
        </member>
        <member name="M:EAS.Objects.PropertyInfo.#ctor">
            <summary>
            初始化 PropertyInfo 类实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.PropertyInfo.Name">
            <summary>
            获取或设置一个值，批示属性名称。
            </summary>
        </member>
        <member name="P:EAS.Objects.PropertyInfo.Type">
            <summary>
            获取或设置一个值，批示属性的数据类型。
            </summary>
        </member>
        <member name="P:EAS.Objects.PropertyInfo.Expression">
            <summary>
            获取或设置一个值，批示属性值的表达式。
            </summary>
        </member>
        <member name="T:EAS.Objects.ComponentConfig">
            <summary>
            系统配置读取类。
            </summary>
        </member>
        <member name="F:EAS.Objects.ComponentConfig.instance">
            <summary>
            保存成员，单实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.ComponentConfig.#ctor">
            <summary>
            初始化 Config 类实例。
            </summary>
        </member>
        <member name="M:EAS.Objects.ComponentConfig.Initialize(System.Xml.XmlNode)">
            <summary>
            根据系统配置根节点初始系统配置。
            </summary>
            <param name="rootNode">根节点。</param>
        </member>
        <member name="M:EAS.Objects.ComponentConfig.GetComponentInfo(System.String)">
            <summary>
            根据对象名称（索引键）获取对象配置信息。
            </summary>
            <param name="name">对象名称。</param>
            <returns>对象配置信息。</returns>
        </member>
        <member name="P:EAS.Objects.ComponentConfig.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="P:EAS.Objects.ComponentConfig.Components">
            <summary>
            获取Objects中配置的对象配置信息。
            </summary>
        </member>
        <member name="T:EAS.Configuration.Config">
            <summary>
            系统配置读取类。
            </summary>
        </member>
        <member name="F:EAS.Configuration.Config.instance">
            <summary>
            保存成员，单实例。
            </summary>
        </member>
        <member name="M:EAS.Configuration.Config.#ctor">
            <summary>
            初始化 Config 类实例。
            </summary>
        </member>
        <member name="F:EAS.Configuration.Config.configRoot">
            <summary>
            配置根节点。
            </summary>
        </member>
        <member name="F:EAS.Configuration.Config.items">
            <summary>
            系统配置项。
            </summary>
        </member>
        <member name="M:EAS.Configuration.Config.Initialize(System.Xml.XmlNode)">
            <summary>
            根据系统配置根节点初始系统配置。
            </summary>
            <param name="rootNode">根节点。</param>
        </member>
        <member name="M:EAS.Configuration.Config.GetRoot">
            <summary>
            取得的系统配置根节点。
            </summary>
            <returns>的系统配置根节点。</returns>
        </member>
        <member name="M:EAS.Configuration.Config.GetValue(System.String)">
            <summary>
            取得指定配置项目的配置值。
            </summary>
            <param name="key"> 系统配置项名称。</param>
            <returns>系统配置项配置值。</returns>
        </member>
        <member name="M:EAS.Configuration.Config.SetValue(System.String,System.String)">
            <summary>
            取得指定配置项目的配置值。
            </summary>
            <param name="key"> 系统配置项名称。</param>
            <param name="value">配置项值。</param>
            <returns>系统配置项配置值。</returns>
        </member>
        <member name="M:EAS.Configuration.Config.Add(System.String,System.String)">
            <summary>
            增加一个系统配置项及其项值。
            </summary>
            <param name="key">配置项名称。</param>
            <param name="value">配置项值。</param>
        </member>
        <member name="M:EAS.Configuration.Config.Remove(System.String)">
            <summary>
            删除一个系统配置项及其项值。
            </summary>
            <param name="key">配置项名称。</param>
        </member>
        <member name="M:EAS.Configuration.Config.Save">
            <summary>
            保存系统配置项的更改到系统配置文件。
            </summary>
        </member>
        <member name="M:EAS.Configuration.Config.Save(System.String)">
            <summary>
            保存系统配置到指定系统配置文件中。
            </summary>
            <param name="file">配置文件名称。</param>
        </member>
        <member name="P:EAS.Configuration.Config.Instance">
            <summary>
            单例。
            </summary>
        </member>
        <member name="P:EAS.Configuration.Config.Count">
            <summary>
            获取系统配置项汇总。
            </summary>
        </member>
        <member name="P:EAS.Configuration.Config.Keys">
            <summary>
            获取所有系统配置项目名称（键）。
            </summary>
        </member>
        <member name="T:EAS.StringExtension">
            <summary>
            字符串扩展。
            </summary>
        </member>
        <member name="M:EAS.StringExtension.IsEmpty(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsInteger(System.String)">
            <summary>
            判断字符串是否为整型
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsPositiveInteger(System.String)">
            <summary>
            判断字符串是否为正整型
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsPositiveInt64(System.String)">
            <summary>
            判断字符串是否为正整型
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsNegativeInteger(System.String)">
            <summary>
            判断字符串是否为负整数
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsNegativeInt64(System.String)">
            <summary>
            判断字符串是否为负整数
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsFloat(System.String)">
            <summary>
            判断字符串是否为浮点型
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsDecimal(System.String)">
            <summary>
            判断字符串是否为十进制数
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsPositiveNumber(System.String)">
            <summary>
            判断字符串是否为正数
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.IsNegativeNumber(System.String)">
            <summary>
            判断字符串是否为负数
            </summary>
            <param name="s">字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:EAS.StringExtension.ToInt(System.String)">
            <summary>
            将字符串转化为整型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>整型值，转化失败默认返回0</returns>
        </member>
        <member name="M:EAS.StringExtension.ToInt64(System.String)">
            <summary>
            将字符串转化为整型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>整型值，转化失败默认返回0</returns>
        </member>
        <member name="M:EAS.StringExtension.ToDouble(System.String)">
            <summary>
            将字符串转化为Double类型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>Double值，转化失败默认返回0</returns>
        </member>
        <member name="M:EAS.StringExtension.ToDecimal(System.String)">
            <summary>
            将字符串转化为Decimal类型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>Double值，转化失败默认返回0</returns>
        </member>
        <member name="M:EAS.StringExtension.ToDateTime(System.String)">
            <summary>
            将字符串转化为时间类型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>时间，转化失败默认返回最小时间</returns>
        </member>
        <member name="M:EAS.StringExtension.ToFloat(System.String)">
            <summary>
            将字符串转化为浮点型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>浮点值，转化失败默认返回0</returns>
        </member>
        <member name="M:EAS.StringExtension.ToBoolean(System.String)">
            <summary>
            将字符串转化为布尔型
            </summary>
            <remarks>扩展方法</remarks>
            <returns>布尔值，转化失败默认返回false</returns>
        </member>
        <member name="F:EAS.StringExtension.strChineseFirstPY">
            <summary>
            汉字拼音首字母列表 本列表包含了20901个汉字,用于配合 ToPinYin 函数使用,本表收录的字符的Unicode编码范围为19968至40869
            </summary>
        </member>
        <member name="M:EAS.StringExtension.ToPinYin(System.String)">
            <summary>
            获得一个字符串的汉语拼音码,XDesigner编制
            </summary>
            <param name="s">字符串</param>
            <returns>汉语拼音码,该字符串只包含大写的英文字母</returns>
        </member>
        <member name="T:EAS.Services.TimeService">
            <summary>
            时间同步服务。
            </summary>
        </member>
        <member name="M:EAS.Services.TimeService.GetCurrentTime">
            <summary>
            获取系统当前时间。
            </summary>
            <returns>系统当前时间。</returns>
        </member>
        <member name="T:EAS.Services.ServiceObject">
            <summary>
            服务组件定义。
            </summary>
            <remarks>
            AgileEAS.NET平台中的服务(组件)基类,非独立接口的服务(组件)请继续自本类。
            </remarks>
        </member>
        <member name="T:EAS.Security.Privileges">
             <summary>
            权限值枚举。
             </summary>
        </member>
        <member name="F:EAS.Security.Privileges.Execute">
             <summary>
            执行权限。
             </summary>
        </member>
        <member name="F:EAS.Security.Privileges.ExecuteEx">
            <summary>
            自定义执行。
            </summary>
        </member>
        <member name="F:EAS.Security.Privileges.Config">
            <summary>
            对象配置。
            </summary>
        </member>
        <member name="F:EAS.Security.Privileges.Delete">
            <summary>
            对象删除。
            </summary>
        </member>
        <member name="T:EAS.Security.IPrivileger">
            <summary>
            系统权限所有者(角色，账户)的基本规范。
            </summary>
        </member>
        <member name="P:EAS.Security.IPrivileger.Type">
            <summary>
            获取权限所有者类型，返回权限所有者IPrivilegerOwner枚举。
            </summary>
            <remarks>该值用于说明权限所有者的类型。</remarks>
        </member>
        <member name="P:EAS.Security.IPrivileger.Name">
            <summary>
            获取IDDP系统对象权限所有者名称。
            </summary>
            <remarks>该值用于说明权限所有者的名称。</remarks>
        </member>
        <member name="T:EAS.Modularization.ModuleAttribute">
            <summary>
            EAS.NET模块插件属性。
            </summary>
            <remarks>
            提供IModule的标记实现,提供基于属性标记的插件实现。
            </remarks>
        </member>
        <member name="M:EAS.Modularization.ModuleAttribute.#ctor">
            <summary>
            初始化ModuleAttribute对象。
            </summary>
        </member>
        <member name="M:EAS.Modularization.ModuleAttribute.#ctor(System.String,System.String)">
            <summary>
            初始化ModuleAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
        </member>
        <member name="M:EAS.Modularization.ModuleAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化ModuleAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
            <param name="description">模块说明。</param>
        </member>
        <member name="M:EAS.Modularization.ModuleAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化ModuleAttribute对象。
            </summary>
            <param name="guid">模块Guid。</param>
            <param name="name">模块名称。</param>
            <param name="group">模块分组。</param>
            <param name="description">模块说明。</param>
        </member>
        <member name="T:EAS.Modularization.ModuleStartAttribute">
            <summary>
            模块入口方法属性。
            </summary>
            <remarks>
            配合ModuleAttribute实现基于标记的IMoule模块。
            </remarks>
        </member>
        <member name="M:EAS.Modularization.ModuleStartAttribute.#ctor">
            <summary>
            初始化ModuleStartAttribute对象。
            </summary>
        </member>
        <member name="T:EAS.Objects.EmptyAssemblyLoader">
            <summary>
            空的程序集加载器。
            </summary>
        </member>
        <member name="M:EAS.Objects.EmptyAssemblyLoader.Initialize">
            <summary>
            初始化容器。
            </summary>
        </member>
        <member name="P:EAS.Objects.EmptyAssemblyLoader.Container">
            <summary>
            目标组件容器。
            </summary>
        </member>
        <member name="T:EAS.Sockets.RequestWaitHandle">
            <summary>
            请示==>响应消息任务类。
            </summary>
        </member>
        <member name="F:EAS.Sockets.RequestWaitHandle.Timeout">
            <summary>
            超时设置。
            </summary>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.#ctor(System.UInt32)">
            <summary>
            使用请求消息ID初始化RequestWaitHandle对象实例。
            </summary>
            <param name="requestId">请求消息ID。</param>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.#ctor(System.UInt32,EAS.Sockets.NetInvokeTask)">
            <summary>
            使用请求消息ID初始化RequestWaitHandle对象实例。
            </summary>
            <param name="requestId">请求消息ID。</param>
            <param name="callBack">回调任务。</param>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.WaitOne">
            <summary>
            等待同步。
            </summary>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.Set(EAS.Sockets.Messages.IMessage)">
            <summary>
            同步访问结果。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.Set(System.Exception)">
            <summary>
            同步访问结果/错误。
            </summary>
            <param name="error">错误。</param>
        </member>
        <member name="M:EAS.Sockets.RequestWaitHandle.GetHashCode">
            <summary>
            获取Hash码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EAS.Sockets.RequestWaitHandle.RequestId">
            <summary>
            消息实例ID。
            </summary>
        </member>
        <member name="P:EAS.Sockets.RequestWaitHandle.Message">
            <summary>
            回复消息。
            </summary>
        </member>
        <member name="P:EAS.Sockets.RequestWaitHandle.Error">
            <summary>
            异常。
            </summary>
        </member>
        <member name="T:EAS.MessageNotifyHandler">
            <summary>
            消息通知委托。
            </summary>
            <param name="Message">消息对象。</param>
        </member>
        <member name="T:EAS.MessageExchange">
            <summary>
            消息交换中心。
            </summary>
        </member>
        <member name="M:EAS.MessageExchange.AddNotify(System.Object,EAS.MessageNotifyHandler)">
            <summary>
            注册消息通知。
            </summary>
            <param name="target">消息接收对象。</param>
            <param name="notifyHandler">消息处理事件。</param>
        </member>
        <member name="M:EAS.MessageExchange.ClearNotify">
            <summary>
            清除事件通知。
            </summary>
        </member>
        <member name="M:EAS.MessageExchange.RemoveNotify(System.Object)">
            <summary>
            删除消息通知。
            </summary>
            <param name="target">消息接收对象。</param>
        </member>
        <member name="M:EAS.MessageExchange.SendMessage(System.Object,System.Object)">
            <summary>
            向指定目标发送消息。
            </summary>
            <param name="target">消息接收目标。</param>
            <param name="message">消息对象。</param>
        </member>
        <member name="M:EAS.MessageExchange.SendMessage(System.Type,System.Object)">
            <summary>
            向指定目标发送消息。
            </summary>
            <param name="T">消息接收目标类型。</param>
            <param name="message">消息对象。</param>
        </member>
        <member name="M:EAS.MessageExchange.SendMessage``1(System.Object)">
            <summary>
            向指定目标发送消息。
            </summary>
            <typeparam name="T">消息接收目标类型。</typeparam>
            <param name="message">消息对象。</param>
        </member>
        <member name="T:EAS.DynamicProxy.StandardInterceptor">
            <summary>
            标准拦截器。
            </summary>
        </member>
        <member name="M:EAS.DynamicProxy.StandardInterceptor.#ctor">
            <summary>
            初始化StandardInterceptor对象实例。
            </summary>
        </member>
        <member name="M:EAS.DynamicProxy.StandardInterceptor.PreProceed(EAS.DynamicProxy.IInvocation,System.Object[])">
            <summary>
            在方法调用之前的处理。
            </summary>
            <param name="invocation">调用信息。</param>
            <param name="args">调用参数。</param>
        </member>
        <member name="M:EAS.DynamicProxy.StandardInterceptor.PostProceed(EAS.DynamicProxy.IInvocation,System.Object@,System.Object[])">
            <summary>
            在方法调用之后的处理。
            </summary>
            <param name="invocation">调用信息。</param>
            <param name="retValue">返回值。</param>
            <param name="args">调用参数。</param>
        </member>
        <member name="M:EAS.DynamicProxy.StandardInterceptor.Intercept(EAS.DynamicProxy.IInvocation,System.Object[])">
            <summary>
            拦截方法的执行。
            </summary>
            <param name="invocation">调用信息。</param>
            <param name="args">方法参数。</param>
            <returns>返回结果。</returns>
        </member>
        <member name="T:EAS.Context.DefaultContextFactory">
            <summary>
            系统缺省的上下文(IContext)生成工厂接口实例。
            </summary>
        </member>
        <member name="M:EAS.Context.DefaultContextFactory.#ctor">
            <summary>
            初始化  DefaultContexFactory 对象实例。
            </summary>
        </member>
        <member name="M:EAS.Context.DefaultContextFactory.Create">
            <summary>
            生成一个上下文接口对象实例。
            </summary>		
            <returns>上下文（IIContext）接口实例。</returns>
        </member>
        <member name="T:EAS.ConfigHandler">
            <summary>
            EAS配置读取程序。 
            </summary>
        </member>
        <member name="M:EAS.ConfigHandler.#ctor">
            <summary>
            初始化 ConfigHandler 类实例。
            </summary>
        </member>
        <member name="M:EAS.ConfigHandler.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建一个配置对象，由所有配置节处理程序实现，以分析配置节的 XML。
            </summary>
            <param name="parent">对应父配置节中的配置设置。</param>
            <param name="context">在从 ASP.NET 配置系统中调用 Create 时为 HttpConfigurationContext。否则，该参数是保留参数，并且为空引用（Visual Basic 中为 Nothing）。</param>
            <param name="section">一个 XmlNode，它包含配置文件中的配置信息。</param>
            <returns>配置对象。</returns>
        </member>
        <member name="T:EAS.Workflow.WorkflowAddInAttribute">
            <summary>
            工作流插件属性。
            </summary>
        </member>
        <member name="M:EAS.Workflow.WorkflowAddInAttribute.#ctor(System.String)">
            <summary>
            初始化WorkFlowAddInAttribute对象实例。
            </summary>
            <param name="flowID">流程ID。</param>
        </member>
        <member name="M:EAS.Workflow.WorkflowAddInAttribute.#ctor(System.String,System.Type)">
            <summary>
            初始化WorkFlowAddInAttribute对象实例。
            </summary>
            <param name="flowID">流程ID。</param>
            <param name="tDataEntity">数据实体类型。</param>
        </member>
        <member name="M:EAS.Workflow.WorkflowAddInAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
            初始化WorkFlowAddInAttribute对象实例。
            </summary>
            <param name="flowID">流程ID。</param>
            <param name="flowName">流程名称。</param>
            <param name="tDataEntity">数据实体类型。</param>
        </member>
        <member name="P:EAS.Workflow.WorkflowAddInAttribute.FlowID">
            <summary>
            工作流ID。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowAddInAttribute.FlowName">
            <summary>
            工作流名称。
            </summary>
        </member>
        <member name="P:EAS.Workflow.WorkflowAddInAttribute.TDataEntity">
            <summary>
            数据实体类型。
            </summary>
        </member>
        <member name="T:EAS.Workflow.WorkflowInstanceIdAttribute">
            <summary>
            工作流实例Id属性。
            </summary>
        </member>
        <member name="T:EAS.Workflow.WorkflowComplatedAttribute">
            <summary>
            工作流实例完成属性。
            </summary>
        </member>
        <member name="T:EAS.Workflow.WorkflowTerminatedAttribute">
            <summary>
            工作流实例终止属性。
            </summary>
        </member>
        <member name="T:EAS.TextValueParser">
            <summary>
            值类型转换工具。
            </summary>
        </member>
        <member name="M:EAS.TextValueParser.Parser(System.Type,System.String)">
            <summary>
            根据对象类型及对象文本值构造对象。
            </summary>
            <param name="type">对象类型。</param>
            <param name="val">对象值。</param>
            <returns>值类型实例。</returns>
        </member>
        <member name="M:EAS.TextValueParser.Parser(System.String,System.String)">
            <summary>
            根据对象类型及对象文本值构造对象。
            </summary>
            <param name="typeName">对象类型名称。</param>
            <param name="val">对象值。</param>
            <returns>值类型实例。</returns>
        </member>
        <member name="T:EAS.Sessions.IClient">
            <summary>
            定义会话的客户端。
            </summary>
        </member>
        <member name="P:EAS.Sessions.IClient.ID">
            <summary>
            获取该客户端的标识。
            </summary>
        </member>
        <member name="T:EAS.Services.Locators.WcfServiceInfo">
            <summary>
            Wcf服务配置信息。
            </summary>
        </member>
        <member name="M:EAS.Services.Locators.WcfServiceInfo.FormConfigNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            根据配置文件XML节点初始化。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="name">服务名称。</param>
            <param name="Node">服务配置节点。</param>
        </member>
        <member name="P:EAS.Services.Locators.WcfServiceInfo.Component">
            <summary>
            服务组件名称。
            </summary>
        </member>
        <member name="P:EAS.Services.Locators.WcfServiceInfo.Url">
            <summary>
            服务url。
            </summary>
        </member>
        <member name="T:EAS.Objects.ConfigInfo">
            <summary>
            Objects配置信息。
            </summary>
        </member>
        <member name="M:EAS.Objects.ConfigInfo.#ctor">
            <summary>
            初始化 ConfigInfo 类对象实例。
            </summary>
        </member>
        <member name="P:EAS.Objects.ConfigInfo.Components">
            <summary>
            获取Objects中配置的对象配置信息。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ErrorEventHandler">
            <summary>
            客户端发生错误时事件的委托。
            </summary>
        </member>
        <member name="T:EAS.Sockets.ErrorEventArgs">
            <summary>
            客户发生错误时事件的参数。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ErrorEventArgs.Source">
            <summary>
            获取错误的类型。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ErrorEventArgs.AbandonSession">
            <summary>
            获取或者设置一个值，该值指示是否要终止当前出错的会话。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ErrorEventArgs.Exception">
            <summary>
            获取已经发生的错误异常对象。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ErrorEventArgs.Session">
            <summary>
            获取发生错误的会话。
            </summary>
        </member>
        <member name="P:EAS.Sockets.ErrorEventArgs.State">
            <summary>
            获取或者设置错误发生时的状态对象。
            </summary>
        </member>
        <member name="T:EAS.AddInEventHandler">
            <summary>
            定义模块处理代理。
            </summary>
            <param name="sender">事件源。</param>
            <param name="e">包含事件数据的 EAS.AddInEventArgs。</param>
        </member>
        <member name="T:EAS.AddInEventArgs">
            <summary>
            模块加载和关闭事件。
            </summary>
        </member>
        <member name="M:EAS.AddInEventArgs.#ctor(System.Object)">
            <summary>
            初始化AddInEventArgs对象实例。
            </summary>
            <param name="addIn"></param>
        </member>
        <member name="P:EAS.AddInEventArgs.AddIn">
            <summary>
            获取模块插件。
            </summary>
        </member>
    </members>
</doc>
